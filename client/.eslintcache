[{"/mnt/d/projects/Main Projects/social-media/app/client/src/index.tsx":"1","/mnt/d/projects/Main Projects/social-media/app/client/src/App.tsx":"2","/mnt/d/projects/Main Projects/social-media/app/client/src/utils/ApolloClient.ts":"3","/mnt/d/projects/Main Projects/social-media/app/client/src/components/Navbar.tsx":"4","/mnt/d/projects/Main Projects/social-media/app/client/src/utils/cookies.ts":"5","/mnt/d/projects/Main Projects/social-media/app/client/src/pages/Home.tsx":"6","/mnt/d/projects/Main Projects/social-media/app/client/src/pages/Register.tsx":"7","/mnt/d/projects/Main Projects/social-media/app/client/src/pages/Login.tsx":"8","/mnt/d/projects/Main Projects/social-media/app/client/src/components/Forms/RegisterForm.tsx":"9","/mnt/d/projects/Main Projects/social-media/app/client/src/components/Forms/LoginForm.tsx":"10","/mnt/d/projects/Main Projects/social-media/app/client/src/hooks/useForm.ts":"11","/mnt/d/projects/Main Projects/social-media/app/client/src/components/AuthRoute.tsx":"12","/mnt/d/projects/Main Projects/social-media/app/client/src/AuthUser.context.tsx":"13","/mnt/d/projects/Main Projects/social-media/app/client/src/components/Forms/PostForm.tsx":"14","/mnt/d/projects/Main Projects/social-media/app/client/src/utils/graphql.ts":"15","/mnt/d/projects/Main Projects/social-media/app/client/src/components/PostCard.tsx":"16","/mnt/d/projects/Main Projects/social-media/app/client/src/components/LikeButton.tsx":"17","/mnt/d/projects/Main Projects/social-media/app/client/src/pages/SingleUser.tsx":"18","/mnt/d/projects/Main Projects/social-media/app/client/src/pages/SinglePost.tsx":"19","/mnt/d/projects/Main Projects/social-media/app/client/src/components/Forms/CommentForm.tsx":"20","/mnt/d/projects/Main Projects/social-media/app/client/src/components/Comment.tsx":"21","/mnt/d/projects/Main Projects/social-media/app/client/src/components/CommentButton.tsx":"22","/mnt/d/projects/Main Projects/social-media/app/client/src/components/ConfirmModal.tsx":"23","/mnt/d/projects/Main Projects/social-media/app/client/src/components/Forms/EditCommentForm.tsx":"24","/mnt/d/projects/Main Projects/social-media/app/client/src/Routes.tsx":"25","/mnt/d/projects/Main Projects/social-media/app/client/src/components/Logo.tsx":"26","/mnt/d/projects/Main Projects/social-media/app/client/src/components/Links.tsx":"27","/mnt/d/projects/Main Projects/social-media/app/client/src/components/CustomButton.tsx":"28","/mnt/d/projects/Main Projects/social-media/app/client/src/components/CustomInputText.tsx":"29","/mnt/d/projects/Main Projects/social-media/app/client/src/pages/NewPost.tsx":"30"},{"size":219,"mtime":1609481171999,"results":"31","hashOfConfig":"32"},{"size":570,"mtime":1610089377729,"results":"33","hashOfConfig":"32"},{"size":601,"mtime":1609770634153,"results":"34","hashOfConfig":"32"},{"size":354,"mtime":1610103442676,"results":"35","hashOfConfig":"32"},{"size":723,"mtime":1609481172096,"results":"36","hashOfConfig":"32"},{"size":973,"mtime":1610296954964,"results":"37","hashOfConfig":"32"},{"size":285,"mtime":1610280969122,"results":"38","hashOfConfig":"32"},{"size":269,"mtime":1610280957744,"results":"39","hashOfConfig":"32"},{"size":4342,"mtime":1610261614373,"results":"40","hashOfConfig":"32"},{"size":2523,"mtime":1610261422613,"results":"41","hashOfConfig":"32"},{"size":581,"mtime":1610296742964,"results":"42","hashOfConfig":"32"},{"size":829,"mtime":1610298179153,"results":"43","hashOfConfig":"32"},{"size":1623,"mtime":1609581014216,"results":"44","hashOfConfig":"32"},{"size":2864,"mtime":1610296809510,"results":"45","hashOfConfig":"32"},{"size":468,"mtime":1609583256065,"results":"46","hashOfConfig":"32"},{"size":4847,"mtime":1610283733999,"results":"47","hashOfConfig":"32"},{"size":1780,"mtime":1610282071990,"results":"48","hashOfConfig":"32"},{"size":1784,"mtime":1610280995048,"results":"49","hashOfConfig":"32"},{"size":2072,"mtime":1610296893992,"results":"50","hashOfConfig":"32"},{"size":1846,"mtime":1610296840593,"results":"51","hashOfConfig":"32"},{"size":3464,"mtime":1609858620981,"results":"52","hashOfConfig":"32"},{"size":518,"mtime":1610280811266,"results":"53","hashOfConfig":"32"},{"size":1415,"mtime":1610282840090,"results":"54","hashOfConfig":"32"},{"size":1691,"mtime":1610202235048,"results":"55","hashOfConfig":"32"},{"size":859,"mtime":1610297640636,"results":"56","hashOfConfig":"32"},{"size":361,"mtime":1610116983521,"results":"57","hashOfConfig":"32"},{"size":1434,"mtime":1610297209471,"results":"58","hashOfConfig":"32"},{"size":856,"mtime":1610280452640,"results":"59","hashOfConfig":"32"},{"size":1550,"mtime":1610296606084,"results":"60","hashOfConfig":"32"},{"size":284,"mtime":1610297088184,"results":"61","hashOfConfig":"32"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},"5ctubq",{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"67"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"67"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"67"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"67"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"67"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"67"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"82","usedDeprecatedRules":"67"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"85","usedDeprecatedRules":"67"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"67"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"67"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"98","usedDeprecatedRules":"67"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"101","usedDeprecatedRules":"67"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"67"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"106","messages":"107","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"108","usedDeprecatedRules":"67"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"111","usedDeprecatedRules":"67"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"67"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"67"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"118","usedDeprecatedRules":"67"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"121","messages":"122","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"67"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"125","messages":"126","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"67"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"67"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/mnt/d/projects/Main Projects/social-media/app/client/src/index.tsx",[],["131","132"],"/mnt/d/projects/Main Projects/social-media/app/client/src/App.tsx",[],["133","134"],"/mnt/d/projects/Main Projects/social-media/app/client/src/utils/ApolloClient.ts",[],"/mnt/d/projects/Main Projects/social-media/app/client/src/components/Navbar.tsx",[],"/mnt/d/projects/Main Projects/social-media/app/client/src/utils/cookies.ts",[],"/mnt/d/projects/Main Projects/social-media/app/client/src/pages/Home.tsx",["135","136"],"/mnt/d/projects/Main Projects/social-media/app/client/src/pages/Register.tsx",[],"/mnt/d/projects/Main Projects/social-media/app/client/src/pages/Login.tsx",[],"/mnt/d/projects/Main Projects/social-media/app/client/src/components/Forms/RegisterForm.tsx",["137"],"import React from \"react\";\nimport { gql, useMutation } from \"@apollo/client\";\n\nimport { AuthContext } from \"../../AuthUser.context\";\nimport useForm from \"../../hooks/useForm\";\nimport CustomInputText from \"../CustomInputText\";\nimport CustomButton from \"../CustomButton\";\nimport { Link } from \"react-router-dom\";\n\ninterface RegisterFormValues {\n  firstName: string;\n  lastName: string;\n  username: string;\n  email: string;\n  password: string;\n  confirmPassword: string;\n}\n\nconst RegisterForm: React.FC = () => {\n  const context = React.useContext(AuthContext);\n  const [errors, setErrors] = React.useState<RegisterFormValues>({\n    firstName: \"\",\n    lastName: \"\",\n    username: \"\",\n    email: \"\",\n    password: \"\",\n    confirmPassword: \"\",\n  });\n  const { values, onSubmit, onChange } = useForm<RegisterFormValues>(\n    {\n      firstName: \"\",\n      lastName: \"\",\n      username: \"\",\n      email: \"\",\n      password: \"\",\n      confirmPassword: \"\",\n    },\n    handleRegistration\n  );\n\n  const [registerUser, { loading }] = useMutation(REGISTER_USER, {\n    update(_, { data: { register: userData } }) {\n      context.login(userData);\n    },\n    variables: values,\n    onError({ graphQLErrors, networkError }) {\n      if (graphQLErrors) {\n        setErrors(graphQLErrors[0].extensions!.exception.errors);\n      }\n    },\n  });\n\n  function handleRegistration() {\n    registerUser();\n  }\n\n  return (\n    <form className=\"form\" onSubmit={onSubmit}>\n      <h1 className=\"heading-primary  text-centered\">REGISTER</h1>\n      <div className=\"form-control\">\n        <CustomInputText\n          autoFocus\n          id=\"register-firstName\"\n          label=\"First Name\"\n          name=\"firstName\"\n          type=\"text\"\n          value={values.firstName}\n          handleChange={onChange}\n          error={errors.firstName}\n          required\n          styleClass=\"margin-r-md\"\n        />\n        <CustomInputText\n          id=\"register-lastName\"\n          label=\"Last Name\"\n          name=\"lastName\"\n          type=\"text\"\n          value={values.lastName}\n          handleChange={onChange}\n          error={errors.lastName}\n        />\n      </div>\n      <div className=\"form-control\">\n        <CustomInputText\n          handleChange={onChange}\n          id=\"register-username\"\n          label=\"Username\"\n          type=\"text\"\n          name=\"username\"\n          value={values.username}\n          error={errors.username}\n          required\n        />\n      </div>\n      <div className=\"form-control\">\n        <CustomInputText\n          handleChange={onChange}\n          id=\"register-email\"\n          label=\"Email\"\n          type=\"email\"\n          name=\"email\"\n          value={values.email}\n          error={errors.email}\n          required\n        />\n      </div>\n      <div className=\"form-control\">\n        <CustomInputText\n          handleChange={onChange}\n          id=\"register-password\"\n          label=\"Password\"\n          type=\"password\"\n          name=\"password\"\n          value={values.password}\n          error={errors.password}\n          required\n        />\n      </div>\n      <div className=\"form-control\">\n        <CustomInputText\n          id=\"register-confirmPassword\"\n          label=\"Confirm password\"\n          name=\"confirmPassword\"\n          type=\"password\"\n          value={values.confirmPassword}\n          handleChange={onChange}\n          error={errors.confirmPassword}\n          required\n        />\n      </div>\n      <div className=\"form-control margin-y-lg\">\n        <CustomButton type=\"submit\" styleClass=\"full-width\" color=\"success\">\n          Register\n        </CustomButton>\n      </div>\n      <p className=\"paragraph\">\n        Already a member?\n        <Link to=\"/login\">\n          <span className=\"link\"> Sign in.</span>\n        </Link>\n      </p>\n    </form>\n  );\n};\n\nconst REGISTER_USER = gql`\n  mutation(\n    $username: String!\n    $firstName: String!\n    $lastName: String!\n    $email: String!\n    $password: String!\n    $confirmPassword: String!\n  ) {\n    register(\n      registerInput: {\n        username: $username\n        firstName: $firstName\n        lastName: $lastName\n        email: $email\n        password: $password\n        confirmPassword: $confirmPassword\n      }\n    ) {\n      username\n      token\n      createdAt\n      firstName\n      lastName\n      email\n      id\n    }\n  }\n`;\n\nexport default RegisterForm;\n","/mnt/d/projects/Main Projects/social-media/app/client/src/components/Forms/LoginForm.tsx",["138"],"import React from \"react\";\nimport { gql, useMutation } from \"@apollo/client\";\nimport { Link } from \"react-router-dom\";\n\nimport { AuthContext } from \"../../AuthUser.context\";\nimport useForm from \"../../hooks/useForm\";\nimport CustomInputText from \"../CustomInputText\";\nimport CustomButton from \"../CustomButton\";\n\ninterface LoginFormValues {\n  username: string;\n  password: string;\n}\n\nconst LoginForm: React.FC = () => {\n  const context = React.useContext(AuthContext);\n  const [errors, setErrors] = React.useState<{ general: string }>({\n    general: \"\",\n  });\n  const { values, onSubmit, onChange } = useForm<LoginFormValues>(\n    {\n      username: \"\",\n      password: \"\",\n    },\n    handleLogin\n  );\n\n  const [loginUser, { loading }] = useMutation(LOGIN_USER, {\n    update(_, { data: { login: userData } }) {\n      context.login(userData);\n    },\n    onError({ graphQLErrors, networkError }) {\n      if (graphQLErrors) {\n        setErrors(graphQLErrors[0].extensions!.exception.errors);\n      }\n    },\n    variables: values,\n  });\n\n  function handleLogin() {\n    loginUser();\n  }\n\n  return (\n    <form className=\"form\" onSubmit={onSubmit}>\n      <h1 className=\"heading-primary  text-centered\">LOGIN</h1>\n\n      {errors.general !== \"\" && (\n        <h4 className=\"input-text__error\">{errors.general}</h4>\n      )}\n      <div className=\"form-control\">\n        <CustomInputText\n          id=\"login-username\"\n          label=\"Username\"\n          type=\"text\"\n          name=\"username\"\n          value={values.username}\n          handleChange={onChange}\n          required\n          autoFocus\n        />\n      </div>\n      <div className=\"form-control\">\n        <CustomInputText\n          id=\"login-password\"\n          label=\"Password\"\n          type=\"password\"\n          name=\"password\"\n          value={values.password}\n          handleChange={onChange}\n          required\n        />\n      </div>\n      <div className=\"form-control margin-y-lg\">\n        <CustomButton type=\"submit\" styleClass=\"full-width\" color=\"success\">\n          Login\n        </CustomButton>\n      </div>\n      <p className=\"paragraph\">\n        Not a member?\n        <Link to=\"/register\">\n          <span className=\"link\"> Sign up now.</span>\n        </Link>\n      </p>\n    </form>\n  );\n};\n\nconst LOGIN_USER = gql`\n  mutation($username: String!, $password: String!) {\n    login(username: $username, password: $password) {\n      id\n      username\n      firstName\n      lastName\n      token\n      email\n      createdAt\n    }\n  }\n`;\n\nexport default LoginForm;\n","/mnt/d/projects/Main Projects/social-media/app/client/src/hooks/useForm.ts",[],"/mnt/d/projects/Main Projects/social-media/app/client/src/components/AuthRoute.tsx",[],"/mnt/d/projects/Main Projects/social-media/app/client/src/AuthUser.context.tsx",[],"/mnt/d/projects/Main Projects/social-media/app/client/src/components/Forms/PostForm.tsx",["139","140"],"/mnt/d/projects/Main Projects/social-media/app/client/src/utils/graphql.ts",[],"/mnt/d/projects/Main Projects/social-media/app/client/src/components/PostCard.tsx",["141"],"import React, { useState, useContext } from \"react\";\r\nimport { gql, useMutation } from \"@apollo/client\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nimport { GET_ALL_POSTS } from \"../utils/graphql\";\r\nimport { Post } from \"../utils/types\";\r\nimport { AuthContext } from \"../AuthUser.context\";\r\nimport LikeButton from \"./LikeButton\";\r\n\r\nimport CommentButton from \"./CommentButton\";\r\nimport ConfirmModal from \"./ConfirmModal\";\r\nimport PostForm from \"./Forms/PostForm\";\r\n\r\ninterface Props {\r\n  post: Post;\r\n}\r\n\r\ninterface Visibility {\r\n  [props: string]: boolean;\r\n}\r\n\r\nconst PostCard: React.FC<Props> = ({\r\n  post: {\r\n    id,\r\n    edited,\r\n    firstName,\r\n    lastName,\r\n    username,\r\n    createdAt,\r\n    body,\r\n    likeCount,\r\n    commentCount,\r\n    likes,\r\n    ...props\r\n  },\r\n}) => {\r\n  const [visibility, setVisibility] = useState<Visibility>({\r\n    commentForm: false,\r\n    editPost: false,\r\n    modal: false,\r\n    comments: false,\r\n    postMenu: false,\r\n  });\r\n\r\n  const { user } = useContext(AuthContext);\r\n\r\n  const [deletePost, { loading }] = useMutation(DELETE_POST, {\r\n    update(proxy, { data: { deletePost: post } }) {\r\n      let data: any = proxy.readQuery({ query: GET_ALL_POSTS });\r\n\r\n      proxy.writeQuery({\r\n        query: GET_ALL_POSTS,\r\n        data: {\r\n          getPosts: data.getPosts.filter(\r\n            (post: { id: string }) => id !== post.id\r\n          ),\r\n        },\r\n      });\r\n    },\r\n    onError(err) {\r\n      console.log(err);\r\n    },\r\n    variables: { postId: id },\r\n  });\r\n\r\n  let signedInUserPost = false;\r\n  if (user) {\r\n    signedInUserPost = user.username === username;\r\n  }\r\n\r\n  const toggleVisibility = (items: string[]) => {\r\n    items.forEach((item) => {\r\n      setVisibility((visibility) => ({\r\n        ...visibility,\r\n        [item]: !visibility[item],\r\n      }));\r\n    });\r\n  };\r\n\r\n  return (\r\n    <div className=\"post-card__background margin-y-md\">\r\n      <ConfirmModal\r\n        open={visibility.modal}\r\n        onClose={() => toggleVisibility([\"modal\"])}\r\n        onCancel={() => toggleVisibility([\"modal\"])}\r\n        onConfirm={deletePost}\r\n      >\r\n        Do you want to delete this post?\r\n      </ConfirmModal>\r\n      <div className=\"post-card\">\r\n        {signedInUserPost && (\r\n          <div className=\"post-card__menu\">\r\n            <div\r\n              className=\"post-card__menu-icon\"\r\n              onClick={() => toggleVisibility([\"postMenu\"])}\r\n            >\r\n              <span></span>\r\n              <span></span>\r\n              <span></span>\r\n            </div>\r\n            {visibility.postMenu && (\r\n              <ul className=\"post-card__menu-items\">\r\n                <li\r\n                  className=\"post-card__menu-item\"\r\n                  onClick={() => toggleVisibility([\"editPost\", \"postMenu\"])}\r\n                >\r\n                  Edit\r\n                </li>\r\n                <li\r\n                  className=\"post-card__menu-item\"\r\n                  onClick={() => toggleVisibility([\"modal\", \"postMenu\"])}\r\n                >\r\n                  Delete\r\n                </li>\r\n              </ul>\r\n            )}\r\n          </div>\r\n        )}\r\n\r\n        <Link to={`/user/${username}`}>\r\n          <h2 className=\"post-card__title\">\r\n            {firstName} {lastName}\r\n            <span className=\"post-card__username link\"> @{username}</span>\r\n          </h2>\r\n        </Link>\r\n        <span className=\"post-card__meta\">\r\n          {new Date(createdAt).toLocaleDateString(\"en-gb\", {\r\n            year: \"numeric\",\r\n            month: \"long\",\r\n            day: \"numeric\",\r\n          })}\r\n        </span>\r\n        {visibility.editPost ? (\r\n          <PostForm\r\n            isEdit\r\n            body={body}\r\n            postId={id}\r\n            callback={() => setVisibility({ ...visibility, editPost: false })}\r\n          />\r\n        ) : (\r\n          <Link to={`/post/${username}/${id}`}>\r\n            <p className=\"post-card__description \">\r\n              {body}\r\n              {edited && <em>(edited)</em>}\r\n            </p>\r\n          </Link>\r\n        )}\r\n        <div className=\"post-card__extra\">\r\n          <LikeButton id={id} likes={likes} likeCount={likeCount} user={user} />\r\n          <Link to={`/post/${username}/${id}`}>\r\n            <CommentButton count={commentCount} user={user} />\r\n          </Link>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport const DELETE_POST = gql`\r\n  mutation deletePost($postId: ID!) {\r\n    deletePost(postId: $postId) {\r\n      id\r\n      body\r\n      username\r\n      firstName\r\n      lastName\r\n      edited\r\n      createdAt\r\n      likeCount\r\n      likes {\r\n        id\r\n        username\r\n      }\r\n      commentCount\r\n      comments {\r\n        id\r\n        commentId\r\n        body\r\n        username\r\n        firstName\r\n        lastName\r\n        createdAt\r\n        edited\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nexport default PostCard;\r\n","/mnt/d/projects/Main Projects/social-media/app/client/src/components/LikeButton.tsx",["142"],"import React, { useEffect, useState } from \"react\";\r\nimport { gql, useMutation } from \"@apollo/client\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { User } from \"../utils/types\";\r\nimport CustomButton from \"./CustomButton\";\r\n\r\ninterface Props {\r\n  id: string;\r\n\r\n  likes: [{ username: string; id: string }];\r\n  likeCount: number;\r\n  user: User | null;\r\n}\r\n\r\nconst LikeButton: React.FC<Props> = ({ id, likes, likeCount, user }) => {\r\n  const [isLiked, setisLiked] = useState(false);\r\n\r\n  useEffect(() => {\r\n    if (user && likes.find((like) => like.username === user.username)) {\r\n      setisLiked(true);\r\n    } else {\r\n      setisLiked(false);\r\n    }\r\n  });\r\n\r\n  const [likePost] = useMutation(LIKE_POST, {\r\n    update(proxy, { data: { likePost: post } }) {\r\n      likeCount = post.likeCount;\r\n    },\r\n    onError(err) {\r\n      console.log(err);\r\n    },\r\n    variables: { postId: id },\r\n  });\r\n\r\n  return user ? (\r\n    <CustomButton\r\n      styleClass=\"margin-r-md\"\r\n      color={isLiked ? \"primary\" : \"basic\"}\r\n      onClick={() => likePost()}\r\n    >\r\n      LikeIcon {likeCount}\r\n    </CustomButton>\r\n  ) : (\r\n    <Link to=\"/login\">\r\n      <CustomButton styleClass=\"margin-r-md\" noBackground>\r\n        LikeIcon {likeCount}\r\n      </CustomButton>\r\n    </Link>\r\n  );\r\n};\r\n\r\nexport const LIKE_POST = gql`\r\n  mutation likePost($postId: ID!) {\r\n    likePost(postId: $postId) {\r\n      id\r\n      body\r\n      username\r\n      firstName\r\n      lastName\r\n      edited\r\n      createdAt\r\n      likeCount\r\n      likes {\r\n        id\r\n        username\r\n      }\r\n      commentCount\r\n      comments {\r\n        id\r\n        commentId\r\n        body\r\n        username\r\n        firstName\r\n        lastName\r\n        createdAt\r\n        edited\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nexport default LikeButton;\r\n","/mnt/d/projects/Main Projects/social-media/app/client/src/pages/SingleUser.tsx",[],"/mnt/d/projects/Main Projects/social-media/app/client/src/pages/SinglePost.tsx",[],"/mnt/d/projects/Main Projects/social-media/app/client/src/components/Forms/CommentForm.tsx",["143"],"import React from \"react\";\r\nimport { gql, useMutation } from \"@apollo/client\";\r\n\r\nimport useForm from \"../../hooks/useForm\";\r\nimport CustomInputText from \"../CustomInputText\";\r\nimport CustomButton from \"../CustomButton\";\r\n\r\ninterface Props {\r\n  postId: string;\r\n  isEdit?: boolean;\r\n  body?: string;\r\n  commmentId: string;\r\n}\r\n\r\nconst CommentForm: React.FC<Props> = ({ postId }) => {\r\n  const { values, onSubmit, onChange } = useForm<{ comment: string }>(\r\n    {\r\n      comment: \"\",\r\n    },\r\n    handleComment\r\n  );\r\n\r\n  const [createComment, { loading }] = useMutation(CREATE_COMMENT, {\r\n    update(_, { data: { createComment: post } }) {\r\n      values.comment = \"\";\r\n    },\r\n    variables: {\r\n      body: values.comment,\r\n      postId,\r\n    },\r\n  });\r\n\r\n  function handleComment() {\r\n    createComment();\r\n  }\r\n\r\n  return (\r\n    <form className=\"form form-comment\" onSubmit={onSubmit}>\r\n      <div className=\"form-control\">\r\n        <CustomInputText\r\n          id=\"comment\"\r\n          label=\"Comment\"\r\n          name=\"comment\"\r\n          type=\"text\"\r\n          value={values.comment}\r\n          handleChange={onChange}\r\n          required\r\n        />\r\n      </div>\r\n      <div className=\"form-control\">\r\n        <CustomButton type=\"submit\">Comment</CustomButton>\r\n      </div>\r\n    </form>\r\n  );\r\n};\r\n\r\nconst CREATE_COMMENT = gql`\r\n  mutation createComment($postId: ID!, $body: String!) {\r\n    createComment(postId: $postId, body: $body) {\r\n      id\r\n      body\r\n      username\r\n      firstName\r\n      lastName\r\n      edited\r\n      createdAt\r\n      likeCount\r\n      likes {\r\n        id\r\n        username\r\n      }\r\n      commentCount\r\n      comments {\r\n        id\r\n        commentId\r\n        body\r\n        username\r\n        firstName\r\n        lastName\r\n        createdAt\r\n        edited\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nexport default CommentForm;\r\n","/mnt/d/projects/Main Projects/social-media/app/client/src/components/Comment.tsx",["144"],"import { gql, useMutation } from \"@apollo/client\";\r\nimport React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nimport { AuthContext } from \"../AuthUser.context\";\r\nimport { GET_ALL_POSTS } from \"../utils/graphql\";\r\nimport ConfirmModal from \"./ConfirmModal\";\r\nimport EditCommentForm from \"./Forms/EditCommentForm\";\r\n\r\ninterface Props {\r\n  comment: {\r\n    id: string;\r\n    commentId: string;\r\n    body: string;\r\n    username: string;\r\n    firstName: string;\r\n    lastName: string;\r\n    createdAt: string;\r\n    edited: boolean;\r\n  };\r\n  postId: string;\r\n}\r\n\r\nconst Comment: React.FC<Props> = ({\r\n  comment: {\r\n    commentId,\r\n    body,\r\n    username,\r\n    firstName,\r\n    lastName,\r\n    createdAt,\r\n    edited,\r\n  },\r\n  postId,\r\n}) => {\r\n  const [showEditComment, setShowEditComment] = React.useState(false);\r\n  const [modalOpen, setModalOpen] = React.useState(false);\r\n  const { user } = React.useContext(AuthContext);\r\n\r\n  const [deleteComment, { loading }] = useMutation(DELETE_COMMENT, {\r\n    update(proxy, { data: { deleteComment: post } }) {\r\n      let queryData: any = proxy.readQuery({ query: GET_ALL_POSTS });\r\n\r\n      proxy.writeQuery({\r\n        query: GET_ALL_POSTS,\r\n        data: queryData,\r\n      });\r\n    },\r\n    onError(err) {\r\n      console.log(err);\r\n    },\r\n    variables: {\r\n      postId,\r\n      commentId,\r\n    },\r\n  });\r\n\r\n  let signedInUserComment = false;\r\n  if (user) {\r\n    signedInUserComment = user.username === username;\r\n  }\r\n\r\n  return (\r\n    <div className=\"comment\">\r\n      <ConfirmModal\r\n        open={modalOpen}\r\n        onClose={() => setModalOpen(false)}\r\n        onCancel={() => setModalOpen(false)}\r\n        onConfirm={deleteComment}\r\n      >\r\n        Do you want to delete this comment?\r\n      </ConfirmModal>\r\n      {user && signedInUserComment && (\r\n        <div className=\"comment__menu\">\r\n          <ul className=\"comment__menu-items\">\r\n            <li\r\n              className=\"comment__menu-item\"\r\n              onClick={() => setShowEditComment((show) => !show)}\r\n            >\r\n              Edit\r\n            </li>\r\n            <li\r\n              className=\"comment__menu-item\"\r\n              onClick={() => setModalOpen(true)}\r\n            >\r\n              Delete\r\n            </li>\r\n          </ul>\r\n        </div>\r\n      )}\r\n      <span className=\"comment__title\">\r\n        {firstName} {lastName}\r\n      </span>\r\n      <span className=\"comment__subtitle\">\r\n        <Link to={`/user/${username}`}>@{username}</Link>\r\n      </span>\r\n      <span className=\"comment__meta\">\r\n        {new Date(createdAt).toLocaleDateString(\"en-gb\", {\r\n          year: \"numeric\",\r\n          month: \"long\",\r\n          day: \"numeric\",\r\n        })}\r\n      </span>\r\n      {showEditComment ? (\r\n        <EditCommentForm\r\n          body={body}\r\n          postId={postId}\r\n          commentId={commentId}\r\n          callback={() => setShowEditComment((show) => !show)}\r\n        />\r\n      ) : (\r\n        <p className=\"comment__description\">\r\n          {edited && <em>(edited)</em>}\r\n          {body}\r\n        </p>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nconst DELETE_COMMENT = gql`\r\n  mutation deleteComment($postId: ID!, $commentId: ID!) {\r\n    deleteComment(postId: $postId, commentId: $commentId) {\r\n      id\r\n      commentCount\r\n      comments {\r\n        id\r\n        commentId\r\n        body\r\n        username\r\n        firstName\r\n        lastName\r\n        createdAt\r\n        edited\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nexport default Comment;\r\n","/mnt/d/projects/Main Projects/social-media/app/client/src/components/CommentButton.tsx",[],"/mnt/d/projects/Main Projects/social-media/app/client/src/components/ConfirmModal.tsx",[],"/mnt/d/projects/Main Projects/social-media/app/client/src/components/Forms/EditCommentForm.tsx",["145","146"],"import { gql, useMutation } from \"@apollo/client\";\r\nimport React from \"react\";\r\n\r\nimport useForm from \"../../hooks/useForm\";\r\nimport { GET_ALL_POSTS } from \"../../utils/graphql\";\r\nimport CustomButton from \"../CustomButton\";\r\nimport CustomInputText from \"../CustomInputText\";\r\n\r\ninterface Props {\r\n  body: string;\r\n  postId: string;\r\n  commentId: string;\r\n  callback?: () => void;\r\n}\r\n\r\ninterface EditFormValues {\r\n  body: string;\r\n}\r\n\r\nconst EditCommentForm: React.FC<Props> = ({\r\n  body,\r\n  postId,\r\n  commentId,\r\n  callback,\r\n}) => {\r\n  let { values, onChange, onSubmit } = useForm<EditFormValues>(\r\n    { body },\r\n    handleEdit\r\n  );\r\n\r\n  const [editComment, { loading }] = useMutation(EDIT_COMMENT, {\r\n    update(_, { data: { editComment: post } }) {},\r\n    variables: {\r\n      postId,\r\n      commentId,\r\n      body: values.body,\r\n    },\r\n  });\r\n\r\n  function handleEdit() {\r\n    editComment();\r\n    if (callback) {\r\n      callback();\r\n    }\r\n  }\r\n\r\n  return (\r\n    <form className=\"form post-form\" onSubmit={onSubmit}>\r\n      <CustomInputText\r\n        id=\"edit-comment\"\r\n        label=\"Edit comment\"\r\n        name=\"body\"\r\n        type=\"text\"\r\n        value={values.body}\r\n        handleChange={onChange}\r\n        required\r\n      />\r\n      <CustomButton type=\"submit\">Edit</CustomButton>\r\n    </form>\r\n  );\r\n};\r\n\r\nconst EDIT_COMMENT = gql`\r\n  mutation($postId: ID!, $commentId: ID!, $body: String!) {\r\n    editComment(postId: $postId, commentId: $commentId, body: $body) {\r\n      comments {\r\n        id\r\n        commentId\r\n        body\r\n        username\r\n        firstName\r\n        lastName\r\n        createdAt\r\n        edited\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nexport default EditCommentForm;\r\n","/mnt/d/projects/Main Projects/social-media/app/client/src/Routes.tsx",[],"/mnt/d/projects/Main Projects/social-media/app/client/src/components/Logo.tsx",[],"/mnt/d/projects/Main Projects/social-media/app/client/src/components/Links.tsx",["147"],"/mnt/d/projects/Main Projects/social-media/app/client/src/components/CustomButton.tsx",[],"/mnt/d/projects/Main Projects/social-media/app/client/src/components/CustomInputText.tsx",[],"/mnt/d/projects/Main Projects/social-media/app/client/src/pages/NewPost.tsx",[],{"ruleId":"148","replacedBy":"149"},{"ruleId":"150","replacedBy":"151"},{"ruleId":"148","replacedBy":"152"},{"ruleId":"150","replacedBy":"153"},{"ruleId":"154","severity":1,"message":"155","line":6,"column":8,"nodeType":"156","messageId":"157","endLine":6,"endColumn":16},{"ruleId":"154","severity":1,"message":"158","line":11,"column":11,"nodeType":"156","messageId":"157","endLine":11,"endColumn":15},{"ruleId":"154","severity":1,"message":"159","line":41,"column":26,"nodeType":"156","messageId":"157","endLine":41,"endColumn":33},{"ruleId":"154","severity":1,"message":"159","line":28,"column":23,"nodeType":"156","messageId":"157","endLine":28,"endColumn":30},{"ruleId":"154","severity":1,"message":"159","line":26,"column":24,"nodeType":"156","messageId":"157","endLine":26,"endColumn":31},{"ruleId":"154","severity":1,"message":"160","line":42,"column":22,"nodeType":"156","messageId":"157","endLine":42,"endColumn":27},{"ruleId":"154","severity":1,"message":"159","line":47,"column":24,"nodeType":"156","messageId":"157","endLine":47,"endColumn":31},{"ruleId":"161","severity":1,"message":"162","line":18,"column":3,"nodeType":"156","endLine":18,"endColumn":12,"suggestions":"163"},{"ruleId":"154","severity":1,"message":"159","line":23,"column":27,"nodeType":"156","messageId":"157","endLine":23,"endColumn":34},{"ruleId":"154","severity":1,"message":"159","line":40,"column":27,"nodeType":"156","messageId":"157","endLine":40,"endColumn":34},{"ruleId":"154","severity":1,"message":"164","line":5,"column":10,"nodeType":"156","messageId":"157","endLine":5,"endColumn":23},{"ruleId":"154","severity":1,"message":"159","line":31,"column":25,"nodeType":"156","messageId":"157","endLine":31,"endColumn":32},{"ruleId":"154","severity":1,"message":"165","line":3,"column":10,"nodeType":"156","messageId":"157","endLine":3,"endColumn":14},"no-native-reassign",["166"],"no-negated-in-lhs",["167"],["166"],["167"],"@typescript-eslint/no-unused-vars","'PostForm' is defined but never used.","Identifier","unusedVar","'user' is assigned a value but never used.","'loading' is assigned a value but never used.","'error' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect contains a call to 'setisLiked'. Without a list of dependencies, this can lead to an infinite chain of updates. To fix this, pass [user, likes] as a second argument to the useEffect Hook.",["168"],"'GET_ALL_POSTS' is defined but never used.","'User' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"169","fix":"170"},"Add dependencies array: [user, likes]",{"range":"171","text":"172"},[661,661],", [user, likes]"]