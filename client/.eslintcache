[{"/mnt/d/projects/Main Projects/social-media/app/client/src/index.tsx":"1","/mnt/d/projects/Main Projects/social-media/app/client/src/App.tsx":"2","/mnt/d/projects/Main Projects/social-media/app/client/src/utils/cookies.ts":"3","/mnt/d/projects/Main Projects/social-media/app/client/src/pages/Home.tsx":"4","/mnt/d/projects/Main Projects/social-media/app/client/src/pages/Register.tsx":"5","/mnt/d/projects/Main Projects/social-media/app/client/src/pages/Login.tsx":"6","/mnt/d/projects/Main Projects/social-media/app/client/src/AuthUser.context.tsx":"7","/mnt/d/projects/Main Projects/social-media/app/client/src/pages/SingleUser.tsx":"8","/mnt/d/projects/Main Projects/social-media/app/client/src/pages/SinglePost.tsx":"9","/mnt/d/projects/Main Projects/social-media/app/client/src/pages/NewPost.tsx":"10","/mnt/d/projects/Main Projects/social-media/app/client/src/utils/date.ts":"11","/mnt/d/projects/Main Projects/social-media/app/client/src/hooks/useToast.tsx":"12","/mnt/d/projects/Main Projects/social-media/app/client/src/hooks/useForm.tsx":"13","/mnt/d/projects/Main Projects/social-media/app/client/src/hooks/useModal.tsx":"14","/mnt/d/projects/Main Projects/social-media/app/client/src/hooks/useOutsideAlerter.tsx":"15","/mnt/d/projects/Main Projects/social-media/app/client/src/components/Card/Card.tsx":"16","/mnt/d/projects/Main Projects/social-media/app/client/src/components/Card/CardMenu.tsx":"17","/mnt/d/projects/Main Projects/social-media/app/client/src/components/Card/CardContent.tsx":"18","/mnt/d/projects/Main Projects/social-media/app/client/src/components/Card/CardTitle.tsx":"19","/mnt/d/projects/Main Projects/social-media/app/client/src/components/Card/CardActions.tsx":"20","/mnt/d/projects/Main Projects/social-media/app/client/src/components/Card/CardMeta.tsx":"21","/mnt/d/projects/Main Projects/social-media/app/client/src/components/Card/index.ts":"22","/mnt/d/projects/Main Projects/social-media/app/client/src/hooks/index.ts":"23","/mnt/d/projects/Main Projects/social-media/app/client/src/components/Button/index.ts":"24","/mnt/d/projects/Main Projects/social-media/app/client/src/components/Button/CustomButton.tsx":"25","/mnt/d/projects/Main Projects/social-media/app/client/src/components/Button/LikeButton.tsx":"26","/mnt/d/projects/Main Projects/social-media/app/client/src/components/Button/CommentButton.tsx":"27","/mnt/d/projects/Main Projects/social-media/app/client/src/components/Button/ShareButton.tsx":"28","/mnt/d/projects/Main Projects/social-media/app/client/src/utils/index.ts":"29","/mnt/d/projects/Main Projects/social-media/app/client/src/components/Typography/index.ts":"30","/mnt/d/projects/Main Projects/social-media/app/client/src/components/Typography/Heading.tsx":"31","/mnt/d/projects/Main Projects/social-media/app/client/src/components/Typography/Text.tsx":"32","/mnt/d/projects/Main Projects/social-media/app/client/src/components/Helpers/Spacer.tsx":"33","/mnt/d/projects/Main Projects/social-media/app/client/src/components/Helpers/index.ts":"34","/mnt/d/projects/Main Projects/social-media/app/client/src/components/Helpers/Loading.tsx":"35","/mnt/d/projects/Main Projects/social-media/app/client/src/components/Navigation/Navbar.tsx":"36","/mnt/d/projects/Main Projects/social-media/app/client/src/components/Navigation/Links.tsx":"37","/mnt/d/projects/Main Projects/social-media/app/client/src/components/Navigation/Logo.tsx":"38","/mnt/d/projects/Main Projects/social-media/app/client/src/components/Inputs/index.ts":"39","/mnt/d/projects/Main Projects/social-media/app/client/src/components/Inputs/CustomInputText.tsx":"40","/mnt/d/projects/Main Projects/social-media/app/client/src/containers/Routes.tsx":"41","/mnt/d/projects/Main Projects/social-media/app/client/src/pages/index.ts":"42","/mnt/d/projects/Main Projects/social-media/app/client/src/containers/AuthRoute.tsx":"43","/mnt/d/projects/Main Projects/social-media/app/client/src/components/Layout/Layout.tsx":"44","/mnt/d/projects/Main Projects/social-media/app/client/src/components/Modal/Modal.tsx":"45","/mnt/d/projects/Main Projects/social-media/app/client/src/components/Toast/Toast.tsx":"46","/mnt/d/projects/Main Projects/social-media/app/client/src/graphql.ts":"47","/mnt/d/projects/Main Projects/social-media/app/client/src/config/ApolloClient.ts":"48","/mnt/d/projects/Main Projects/social-media/app/client/src/containers/Forms/CommentForm.tsx":"49","/mnt/d/projects/Main Projects/social-media/app/client/src/containers/Forms/LoginForm.tsx":"50","/mnt/d/projects/Main Projects/social-media/app/client/src/containers/Forms/PostForm.tsx":"51","/mnt/d/projects/Main Projects/social-media/app/client/src/containers/Forms/RegisterForm.tsx":"52","/mnt/d/projects/Main Projects/social-media/app/client/src/containers/Forms/index.ts":"53","/mnt/d/projects/Main Projects/social-media/app/client/src/containers/Cards/CommentCard.tsx":"54","/mnt/d/projects/Main Projects/social-media/app/client/src/containers/Cards/PostCard.tsx":"55","/mnt/d/projects/Main Projects/social-media/app/client/src/containers/Cards/index.ts":"56","/mnt/d/projects/Main Projects/social-media/app/client/src/components/Layout/index.ts":"57","/mnt/d/projects/Main Projects/social-media/app/client/src/components/Layout/Container.tsx":"58"},{"size":197,"mtime":1610703146157,"results":"59","hashOfConfig":"60"},{"size":606,"mtime":1610703442146,"results":"61","hashOfConfig":"60"},{"size":723,"mtime":1609481172096,"results":"62","hashOfConfig":"60"},{"size":1078,"mtime":1610705100814,"results":"63","hashOfConfig":"60"},{"size":259,"mtime":1610705082589,"results":"64","hashOfConfig":"60"},{"size":246,"mtime":1610705082549,"results":"65","hashOfConfig":"60"},{"size":1624,"mtime":1610703482247,"results":"66","hashOfConfig":"60"},{"size":2100,"mtime":1610705267309,"results":"67","hashOfConfig":"60"},{"size":2066,"mtime":1610705352914,"results":"68","hashOfConfig":"60"},{"size":274,"mtime":1610705082582,"results":"69","hashOfConfig":"60"},{"size":235,"mtime":1610366331154,"results":"70","hashOfConfig":"60"},{"size":844,"mtime":1610691454100,"results":"71","hashOfConfig":"60"},{"size":581,"mtime":1610639796479,"results":"72","hashOfConfig":"60"},{"size":269,"mtime":1610640236477,"results":"73","hashOfConfig":"60"},{"size":530,"mtime":1610691559778,"results":"74","hashOfConfig":"60"},{"size":303,"mtime":1610685792139,"results":"75","hashOfConfig":"60"},{"size":1209,"mtime":1610701268434,"results":"76","hashOfConfig":"60"},{"size":260,"mtime":1610686464904,"results":"77","hashOfConfig":"60"},{"size":254,"mtime":1610697659545,"results":"78","hashOfConfig":"60"},{"size":254,"mtime":1610687172211,"results":"79","hashOfConfig":"60"},{"size":245,"mtime":1610687274787,"results":"80","hashOfConfig":"60"},{"size":299,"mtime":1610691337370,"results":"81","hashOfConfig":"60"},{"size":222,"mtime":1610691615309,"results":"82","hashOfConfig":"60"},{"size":240,"mtime":1610694391018,"results":"83","hashOfConfig":"60"},{"size":856,"mtime":1610692331456,"results":"84","hashOfConfig":"60"},{"size":1759,"mtime":1610707802752,"results":"85","hashOfConfig":"60"},{"size":567,"mtime":1610707739258,"results":"86","hashOfConfig":"60"},{"size":894,"mtime":1610703244088,"results":"87","hashOfConfig":"60"},{"size":431,"mtime":1610703372366,"results":"88","hashOfConfig":"60"},{"size":91,"mtime":1610695548007,"results":"89","hashOfConfig":"60"},{"size":371,"mtime":1610703483390,"results":"90","hashOfConfig":"60"},{"size":363,"mtime":1610703484326,"results":"91","hashOfConfig":"60"},{"size":265,"mtime":1610704767881,"results":"92","hashOfConfig":"60"},{"size":97,"mtime":1610702215789,"results":"93","hashOfConfig":"60"},{"size":369,"mtime":1610707836496,"results":"94","hashOfConfig":"60"},{"size":354,"mtime":1610702410684,"results":"95","hashOfConfig":"60"},{"size":1806,"mtime":1610702402926,"results":"96","hashOfConfig":"60"},{"size":364,"mtime":1610702380458,"results":"97","hashOfConfig":"60"},{"size":81,"mtime":1610702529554,"results":"98","hashOfConfig":"60"},{"size":1580,"mtime":1610702501158,"results":"99","hashOfConfig":"60"},{"size":706,"mtime":1610703023785,"results":"100","hashOfConfig":"60"},{"size":278,"mtime":1610702951497,"results":"101","hashOfConfig":"60"},{"size":829,"mtime":1610703010646,"results":"102","hashOfConfig":"60"},{"size":354,"mtime":1610705016183,"results":"103","hashOfConfig":"60"},{"size":1618,"mtime":1610707292054,"results":"104","hashOfConfig":"60"},{"size":1116,"mtime":1610703236659,"results":"105","hashOfConfig":"60"},{"size":468,"mtime":1610703359150,"results":"106","hashOfConfig":"60"},{"size":620,"mtime":1610703440471,"results":"107","hashOfConfig":"60"},{"size":4017,"mtime":1610703686401,"results":"108","hashOfConfig":"60"},{"size":2791,"mtime":1610703725123,"results":"109","hashOfConfig":"60"},{"size":4610,"mtime":1610703741281,"results":"110","hashOfConfig":"60"},{"size":4596,"mtime":1610703779064,"results":"111","hashOfConfig":"60"},{"size":222,"mtime":1610703839415,"results":"112","hashOfConfig":"60"},{"size":3727,"mtime":1610706947948,"results":"113","hashOfConfig":"60"},{"size":4577,"mtime":1610706965640,"results":"114","hashOfConfig":"60"},{"size":115,"mtime":1610703982834,"results":"115","hashOfConfig":"60"},{"size":103,"mtime":1610705034211,"results":"116","hashOfConfig":"60"},{"size":255,"mtime":1610704988205,"results":"117","hashOfConfig":"60"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"120"},"5ctubq",{"filePath":"121","messages":"122","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"120"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"120"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"120"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"120"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"120"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"120"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"120"},{"filePath":"135","messages":"136","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"120"},{"filePath":"137","messages":"138","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"120"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"120"},{"filePath":"141","messages":"142","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"120"},{"filePath":"143","messages":"144","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"120"},{"filePath":"145","messages":"146","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"120"},{"filePath":"147","messages":"148","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"149","usedDeprecatedRules":"120"},{"filePath":"150","messages":"151","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"120"},{"filePath":"152","messages":"153","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"120"},{"filePath":"154","messages":"155","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"120"},{"filePath":"156","messages":"157","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"120"},{"filePath":"158","messages":"159","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"120"},{"filePath":"160","messages":"161","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"120"},{"filePath":"162","messages":"163","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"120"},{"filePath":"164","messages":"165","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"120"},{"filePath":"166","messages":"167","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"120"},{"filePath":"168","messages":"169","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"120"},{"filePath":"170","messages":"171","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"172","messages":"173","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"174","messages":"175","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"120"},{"filePath":"176","messages":"177","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"120"},{"filePath":"178","messages":"179","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"120"},{"filePath":"180","messages":"181","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"120"},{"filePath":"182","messages":"183","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"120"},{"filePath":"184","messages":"185","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"120"},{"filePath":"186","messages":"187","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"120"},{"filePath":"188","messages":"189","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"190","messages":"191","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"120"},{"filePath":"192","messages":"193","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"120"},{"filePath":"194","messages":"195","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"120"},{"filePath":"196","messages":"197","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"120"},{"filePath":"198","messages":"199","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"120"},{"filePath":"200","messages":"201","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"120"},{"filePath":"202","messages":"203","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"120"},{"filePath":"204","messages":"205","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"120"},{"filePath":"206","messages":"207","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"120"},{"filePath":"208","messages":"209","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"120"},{"filePath":"210","messages":"211","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"120"},{"filePath":"212","messages":"213","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"120"},{"filePath":"214","messages":"215","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"120"},{"filePath":"216","messages":"217","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"218","usedDeprecatedRules":"120"},{"filePath":"219","messages":"220","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"221","usedDeprecatedRules":"120"},{"filePath":"222","messages":"223","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"224","usedDeprecatedRules":"120"},{"filePath":"225","messages":"226","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"227","usedDeprecatedRules":"120"},{"filePath":"228","messages":"229","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"120"},{"filePath":"230","messages":"231","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"232","usedDeprecatedRules":"120"},{"filePath":"233","messages":"234","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"235","usedDeprecatedRules":"120"},{"filePath":"236","messages":"237","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"120"},{"filePath":"238","messages":"239","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"120"},{"filePath":"240","messages":"241","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"120"},"/mnt/d/projects/Main Projects/social-media/app/client/src/index.tsx",[],["242","243"],"/mnt/d/projects/Main Projects/social-media/app/client/src/App.tsx",[],"/mnt/d/projects/Main Projects/social-media/app/client/src/utils/cookies.ts",[],"/mnt/d/projects/Main Projects/social-media/app/client/src/pages/Home.tsx",[],"/mnt/d/projects/Main Projects/social-media/app/client/src/pages/Register.tsx",[],"/mnt/d/projects/Main Projects/social-media/app/client/src/pages/Login.tsx",[],"/mnt/d/projects/Main Projects/social-media/app/client/src/AuthUser.context.tsx",[],"/mnt/d/projects/Main Projects/social-media/app/client/src/pages/SingleUser.tsx",[],"/mnt/d/projects/Main Projects/social-media/app/client/src/pages/SinglePost.tsx",[],"/mnt/d/projects/Main Projects/social-media/app/client/src/pages/NewPost.tsx",[],"/mnt/d/projects/Main Projects/social-media/app/client/src/utils/date.ts",[],"/mnt/d/projects/Main Projects/social-media/app/client/src/hooks/useToast.tsx",[],"/mnt/d/projects/Main Projects/social-media/app/client/src/hooks/useForm.tsx",[],"/mnt/d/projects/Main Projects/social-media/app/client/src/hooks/useModal.tsx",[],"/mnt/d/projects/Main Projects/social-media/app/client/src/hooks/useOutsideAlerter.tsx",["244"],"import { useEffect } from \"react\";\r\n\r\nconst useOutsideAlerter = (\r\n  ref: React.MutableRefObject<any>,\r\n  callback: () => void\r\n) => {\r\n  useEffect(() => {\r\n    const handleClickOutside = (event: any) => {\r\n      if (ref.current && !ref.current.contains(event.target)) {\r\n        callback();\r\n      }\r\n    };\r\n    document.addEventListener(\"mousedown\", handleClickOutside);\r\n\r\n    return () => {\r\n      document.removeEventListener(\"mousedown\", handleClickOutside);\r\n    };\r\n  }, [ref]);\r\n};\r\n\r\nexport default useOutsideAlerter;\r\n","/mnt/d/projects/Main Projects/social-media/app/client/src/components/Card/Card.tsx",[],"/mnt/d/projects/Main Projects/social-media/app/client/src/components/Card/CardMenu.tsx",[],"/mnt/d/projects/Main Projects/social-media/app/client/src/components/Card/CardContent.tsx",[],"/mnt/d/projects/Main Projects/social-media/app/client/src/components/Card/CardTitle.tsx",[],"/mnt/d/projects/Main Projects/social-media/app/client/src/components/Card/CardActions.tsx",[],"/mnt/d/projects/Main Projects/social-media/app/client/src/components/Card/CardMeta.tsx",[],"/mnt/d/projects/Main Projects/social-media/app/client/src/components/Card/index.ts",[],"/mnt/d/projects/Main Projects/social-media/app/client/src/hooks/index.ts",[],"/mnt/d/projects/Main Projects/social-media/app/client/src/components/Button/index.ts",[],"/mnt/d/projects/Main Projects/social-media/app/client/src/components/Button/CustomButton.tsx",[],"/mnt/d/projects/Main Projects/social-media/app/client/src/components/Button/LikeButton.tsx",["245"],"/mnt/d/projects/Main Projects/social-media/app/client/src/components/Button/CommentButton.tsx",[],"/mnt/d/projects/Main Projects/social-media/app/client/src/components/Button/ShareButton.tsx",[],"/mnt/d/projects/Main Projects/social-media/app/client/src/utils/index.ts",[],"/mnt/d/projects/Main Projects/social-media/app/client/src/components/Typography/index.ts",[],"/mnt/d/projects/Main Projects/social-media/app/client/src/components/Typography/Heading.tsx",[],"/mnt/d/projects/Main Projects/social-media/app/client/src/components/Typography/Text.tsx",[],"/mnt/d/projects/Main Projects/social-media/app/client/src/components/Helpers/Spacer.tsx",[],"/mnt/d/projects/Main Projects/social-media/app/client/src/components/Helpers/index.ts",[],"/mnt/d/projects/Main Projects/social-media/app/client/src/components/Helpers/Loading.tsx",[],"/mnt/d/projects/Main Projects/social-media/app/client/src/components/Navigation/Navbar.tsx",[],"/mnt/d/projects/Main Projects/social-media/app/client/src/components/Navigation/Links.tsx",[],"/mnt/d/projects/Main Projects/social-media/app/client/src/components/Navigation/Logo.tsx",[],"/mnt/d/projects/Main Projects/social-media/app/client/src/components/Inputs/index.ts",[],"/mnt/d/projects/Main Projects/social-media/app/client/src/components/Inputs/CustomInputText.tsx",[],"/mnt/d/projects/Main Projects/social-media/app/client/src/containers/Routes.tsx",[],"/mnt/d/projects/Main Projects/social-media/app/client/src/pages/index.ts",[],"/mnt/d/projects/Main Projects/social-media/app/client/src/containers/AuthRoute.tsx",[],"/mnt/d/projects/Main Projects/social-media/app/client/src/components/Layout/Layout.tsx",[],"/mnt/d/projects/Main Projects/social-media/app/client/src/components/Modal/Modal.tsx",[],"/mnt/d/projects/Main Projects/social-media/app/client/src/components/Toast/Toast.tsx",[],"/mnt/d/projects/Main Projects/social-media/app/client/src/graphql.ts",[],"/mnt/d/projects/Main Projects/social-media/app/client/src/config/ApolloClient.ts",[],"/mnt/d/projects/Main Projects/social-media/app/client/src/containers/Forms/CommentForm.tsx",["246","247","248"],"import React, { useState, useEffect } from \"react\";\r\nimport { gql, useMutation } from \"@apollo/client\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport {\r\n  faBan,\r\n  faComment,\r\n  faCommentDots,\r\n} from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nimport useForm from \"../../hooks/useForm\";\r\n\r\nimport { Heading } from \"../../components/Typography\";\r\nimport { CustomButton } from \"../../components/Button\";\r\nimport { CustomInputText } from \"../../components/Inputs\";\r\n\r\ninterface Props {\r\n  postId: string;\r\n  isEdit?: boolean;\r\n  body?: string;\r\n  commentId?: string;\r\n  callback?: () => void;\r\n}\r\n\r\nconst CommentForm: React.FC<Props> = ({\r\n  postId,\r\n  body,\r\n  callback,\r\n  commentId,\r\n  isEdit,\r\n}) => {\r\n  const [error, setError] = useState(\"\");\r\n  const { values, onSubmit, onChange } = useForm<{ comment: string }>(\r\n    {\r\n      comment: body ?? \"\",\r\n    },\r\n    handleFormSubmit\r\n  );\r\n  const commentLengthLimit = 200;\r\n\r\n  useEffect(() => {\r\n    if (values.comment.length > commentLengthLimit) {\r\n      if (\r\n        error !== `Post needs to be less than ${commentLengthLimit} in length`\r\n      ) {\r\n        setError(`Post needs to be less than ${commentLengthLimit} in length`);\r\n      }\r\n    } else {\r\n      if (error !== \"\") {\r\n        setError(\"\");\r\n      }\r\n    }\r\n  }, [values.comment]);\r\n\r\n  const [createComment, { loading: createLoading }] = useMutation(\r\n    CREATE_COMMENT,\r\n    {\r\n      update(_, { data: { createComment: post } }) {\r\n        values.comment = \"\";\r\n      },\r\n      variables: {\r\n        body: values.comment,\r\n        postId,\r\n      },\r\n    }\r\n  );\r\n\r\n  const [editComment, { loading: editLoading }] = useMutation(EDIT_COMMENT, {\r\n    update(_, { data: { editComment: post } }) {},\r\n    variables: {\r\n      postId,\r\n      commentId,\r\n      body: values.comment,\r\n    },\r\n  });\r\n\r\n  function handleFormSubmit() {\r\n    if (isEdit) {\r\n      editComment();\r\n      if (callback) {\r\n        callback();\r\n      }\r\n    } else {\r\n      createComment();\r\n    }\r\n  }\r\n\r\n  return (\r\n    <form\r\n      className=\"form comment-form full-width margin-y-md no-margin-x no-padding-t\"\r\n      onSubmit={onSubmit}\r\n    >\r\n      <Heading size=\"sm\">\r\n        {isEdit ? \"Edit your comment\" : \"Comment on this post\"}\r\n      </Heading>\r\n\r\n      <div className=\"form-control\">\r\n        <CustomInputText\r\n          id=\"comment\"\r\n          label={`Comment... (${values.comment.length}/${commentLengthLimit})`}\r\n          name=\"comment\"\r\n          type=\"textarea\"\r\n          value={values.comment}\r\n          handleChange={onChange}\r\n          error={error}\r\n          required\r\n        />\r\n      </div>\r\n      <div className=\"form-control margin-t-md\">\r\n        {isEdit && (\r\n          <CustomButton styleClass=\"full-width\" onClick={callback}>\r\n            <FontAwesomeIcon icon={faBan} /> Cancel\r\n          </CustomButton>\r\n        )}\r\n        <CustomButton color=\"filled\" styleClass=\"full-width\" type=\"submit\">\r\n          <FontAwesomeIcon icon={isEdit ? faCommentDots : faComment} />{\" \"}\r\n          {isEdit ? \"Edit Comment\" : \"Comment\"}\r\n        </CustomButton>\r\n      </div>\r\n    </form>\r\n  );\r\n};\r\n\r\nconst CREATE_COMMENT = gql`\r\n  mutation createComment($postId: ID!, $body: String!) {\r\n    createComment(postId: $postId, body: $body) {\r\n      id\r\n      body\r\n      username\r\n      firstName\r\n      lastName\r\n      edited\r\n      createdAt\r\n      likeCount\r\n      likes {\r\n        id\r\n        username\r\n      }\r\n      commentCount\r\n      comments {\r\n        id\r\n        commentId\r\n        body\r\n        username\r\n        firstName\r\n        lastName\r\n        createdAt\r\n        edited\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nconst EDIT_COMMENT = gql`\r\n  mutation($postId: ID!, $commentId: ID!, $body: String!) {\r\n    editComment(postId: $postId, commentId: $commentId, body: $body) {\r\n      comments {\r\n        id\r\n        commentId\r\n        body\r\n        username\r\n        firstName\r\n        lastName\r\n        createdAt\r\n        edited\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nexport default CommentForm;\r\n","/mnt/d/projects/Main Projects/social-media/app/client/src/containers/Forms/LoginForm.tsx",["249"],"import React from \"react\";\nimport { gql, useMutation } from \"@apollo/client\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faSignInAlt } from \"@fortawesome/free-solid-svg-icons\";\nimport { Link } from \"react-router-dom\";\n\nimport { AuthContext } from \"../../AuthUser.context\";\nimport useForm from \"../../hooks/useForm\";\n\nimport { Heading, Text } from \"../../components/Typography\";\nimport { CustomInputText } from \"../../components/Inputs\";\nimport { CustomButton } from \"../../components/Button\";\n\ninterface LoginFormValues {\n  username: string;\n  password: string;\n}\n\nconst LoginForm: React.FC = () => {\n  const context = React.useContext(AuthContext);\n  const [errors, setErrors] = React.useState<{ general: string }>({\n    general: \"\",\n  });\n  const { values, onSubmit, onChange } = useForm<LoginFormValues>(\n    {\n      username: \"\",\n      password: \"\",\n    },\n    handleLogin\n  );\n\n  const [loginUser, { loading }] = useMutation(LOGIN_USER, {\n    update(_, { data: { login: userData } }) {\n      context.login(userData);\n    },\n    onError({ graphQLErrors, networkError }) {\n      if (graphQLErrors) {\n        setErrors(graphQLErrors[0].extensions!.exception.errors);\n      }\n    },\n    variables: values,\n  });\n\n  function handleLogin() {\n    loginUser();\n  }\n\n  return (\n    <form className=\"form login-form \" onSubmit={onSubmit}>\n      <Heading size=\"xl\" className=\"text-centered\">\n        LOGIN\n      </Heading>\n\n      {errors.general !== \"\" && (\n        <h4 className=\"input-text__error\">{errors.general}</h4>\n      )}\n      <div className=\"form-control\">\n        <CustomInputText\n          id=\"login-username\"\n          label=\"Username\"\n          type=\"text\"\n          name=\"username\"\n          value={values.username}\n          handleChange={onChange}\n          required\n          autoFocus\n        />\n      </div>\n      <div className=\"form-control\">\n        <CustomInputText\n          id=\"login-password\"\n          label=\"Password\"\n          type=\"password\"\n          name=\"password\"\n          value={values.password}\n          handleChange={onChange}\n          required\n        />\n      </div>\n      <div className=\"form-control margin-y-lg\">\n        <CustomButton type=\"submit\" styleClass=\"full-width\" color=\"success\">\n          <FontAwesomeIcon icon={faSignInAlt} /> Login\n        </CustomButton>\n      </div>\n      <Text>\n        Not a member?\n        <Link to=\"/register\">\n          <span className=\"link\"> Sign up now.</span>\n        </Link>\n      </Text>\n    </form>\n  );\n};\n\nconst LOGIN_USER = gql`\n  mutation($username: String!, $password: String!) {\n    login(username: $username, password: $password) {\n      id\n      username\n      firstName\n      lastName\n      token\n      email\n      createdAt\n    }\n  }\n`;\n\nexport default LoginForm;\n","/mnt/d/projects/Main Projects/social-media/app/client/src/containers/Forms/PostForm.tsx",["250","251","252"],"import React, { useState, useEffect } from \"react\";\r\nimport { gql, useMutation } from \"@apollo/client\";\r\nimport { faBan, faEdit, faPencilAlt } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { useHistory } from \"react-router\";\r\n\r\nimport useForm from \"../../hooks/useForm\";\r\nimport { GET_ALL_POSTS } from \"../../graphql\";\r\n\r\nimport { Heading } from \"../../components/Typography\";\r\nimport { CustomInputText } from \"../../components/Inputs\";\r\nimport { CustomButton } from \"../../components/Button\";\r\n\r\ninterface NewPostFormValues {\r\n  body: string;\r\n}\r\n\r\ninterface Props {\r\n  isEdit?: boolean;\r\n  body?: string;\r\n  postId?: string;\r\n  callback?: () => void;\r\n}\r\n\r\nconst PostForm: React.FC<Props> = ({ isEdit, body, postId, callback }) => {\r\n  let history = useHistory();\r\n  const [error, setError] = useState(\"\");\r\n  let { values, onChange, onSubmit } = useForm<NewPostFormValues>(\r\n    { body: body ?? \"\" },\r\n    handleFormSubmit\r\n  );\r\n  const bodyLengthLimit = 250;\r\n\r\n  useEffect(() => {\r\n    if (values.body.length > bodyLengthLimit) {\r\n      if (error !== `Post needs to be less than ${bodyLengthLimit} in length`) {\r\n        setError(`Post needs to be less than ${bodyLengthLimit} in length`);\r\n      }\r\n    } else {\r\n      if (error !== \"\") {\r\n        setError(\"\");\r\n      }\r\n    }\r\n  }, [values.body]);\r\n\r\n  const [createPost, { loading }] = useMutation(CREATE_POST, {\r\n    update(proxy, { data: { createPost: post } }) {\r\n      let data: any = proxy.readQuery({ query: GET_ALL_POSTS });\r\n\r\n      proxy.writeQuery({\r\n        query: GET_ALL_POSTS,\r\n        data: { getPosts: [post, ...data.getPosts] },\r\n      });\r\n      values.body = \"\";\r\n    },\r\n    onError(err) {\r\n      console.log(err);\r\n    },\r\n    variables: values,\r\n  });\r\n\r\n  const [editPost, { error: editError }] = useMutation(EDIT_POST, {\r\n    update(_, { data: { editPost: post } }) {},\r\n    variables: {\r\n      postId,\r\n      body: values.body,\r\n    },\r\n  });\r\n\r\n  //  Regular function to allow hoisting to useForm hook\r\n  function handleFormSubmit() {\r\n    if (isEdit) {\r\n      editPost();\r\n      if (callback) {\r\n        callback();\r\n      }\r\n    } else {\r\n      createPost();\r\n      history.push(\"/\");\r\n    }\r\n  }\r\n\r\n  const handleSubmit = (e: React.FormEvent<HTMLFormElement>) => {\r\n    if (values.body.length <= bodyLengthLimit) {\r\n      onSubmit(e);\r\n    } else {\r\n      e.preventDefault();\r\n      alert(\"Post length limit exceeded\");\r\n    }\r\n  };\r\n\r\n  return (\r\n    <form\r\n      className=\"form post-form full-width margin-y-md\"\r\n      onSubmit={handleSubmit}\r\n    >\r\n      <Heading>{isEdit ? \"Edit your post\" : \"Post something!\"}</Heading>\r\n\r\n      <div className=\"form-control\">\r\n        <CustomInputText\r\n          id=\"new-post\"\r\n          label={`${isEdit ? \"Edit post...\" : \"What's on your mind?\"} (${\r\n            values.body.length\r\n          }/${bodyLengthLimit})`}\r\n          name=\"body\"\r\n          type=\"textarea\"\r\n          value={values.body}\r\n          handleChange={onChange}\r\n          required\r\n          error={error}\r\n        />\r\n      </div>\r\n      <div className=\"form-control\">\r\n        {isEdit && (\r\n          <CustomButton styleClass=\"full-width text-4\" onClick={callback}>\r\n            <FontAwesomeIcon icon={faBan} /> Cancel\r\n          </CustomButton>\r\n        )}\r\n        <CustomButton\r\n          color=\"filled\"\r\n          styleClass=\"full-width text-4\"\r\n          type=\"submit\"\r\n        >\r\n          <FontAwesomeIcon icon={isEdit ? faEdit : faPencilAlt} />{\" \"}\r\n          {isEdit ? \"Edit\" : \"Post!\"}\r\n        </CustomButton>\r\n      </div>\r\n    </form>\r\n  );\r\n};\r\n\r\nconst CREATE_POST = gql`\r\n  mutation($body: String!) {\r\n    createPost(body: $body) {\r\n      id\r\n      body\r\n      username\r\n      firstName\r\n      lastName\r\n      edited\r\n      createdAt\r\n      likeCount\r\n      likes {\r\n        id\r\n        username\r\n      }\r\n      commentCount\r\n      comments {\r\n        id\r\n        commentId\r\n        body\r\n        username\r\n        firstName\r\n        lastName\r\n        createdAt\r\n        edited\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nconst EDIT_POST = gql`\r\n  mutation($postId: ID!, $body: String!) {\r\n    editPost(postId: $postId, body: $body) {\r\n      id\r\n      body\r\n      username\r\n      firstName\r\n      lastName\r\n      edited\r\n      createdAt\r\n      likeCount\r\n      likes {\r\n        id\r\n        username\r\n      }\r\n      commentCount\r\n      comments {\r\n        id\r\n        commentId\r\n        body\r\n        username\r\n        firstName\r\n        lastName\r\n        createdAt\r\n        edited\r\n      }\r\n    }\r\n  }\r\n`;\r\nexport default PostForm;\r\n","/mnt/d/projects/Main Projects/social-media/app/client/src/containers/Forms/RegisterForm.tsx",["253"],"import React from \"react\";\nimport { gql, useMutation } from \"@apollo/client\";\nimport { Link } from \"react-router-dom\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faUserPlus } from \"@fortawesome/free-solid-svg-icons\";\n\nimport { AuthContext } from \"../../AuthUser.context\";\nimport useForm from \"../../hooks/useForm\";\n\nimport { Heading, Text } from \"../../components/Typography\";\nimport { CustomInputText } from \"../../components/Inputs\";\nimport { CustomButton } from \"../../components/Button\";\n\ninterface RegisterFormValues {\n  firstName: string;\n  lastName: string;\n  username: string;\n  email: string;\n  password: string;\n  confirmPassword: string;\n}\n\nconst RegisterForm: React.FC = () => {\n  const context = React.useContext(AuthContext);\n  const [errors, setErrors] = React.useState<RegisterFormValues>({\n    firstName: \"\",\n    lastName: \"\",\n    username: \"\",\n    email: \"\",\n    password: \"\",\n    confirmPassword: \"\",\n  });\n  const { values, onSubmit, onChange } = useForm<RegisterFormValues>(\n    {\n      firstName: \"\",\n      lastName: \"\",\n      username: \"\",\n      email: \"\",\n      password: \"\",\n      confirmPassword: \"\",\n    },\n    handleRegistration\n  );\n\n  const [registerUser, { loading }] = useMutation(REGISTER_USER, {\n    update(_, { data: { register: userData } }) {\n      context.login(userData);\n    },\n    variables: values,\n    onError({ graphQLErrors, networkError }) {\n      if (graphQLErrors) {\n        setErrors(graphQLErrors[0].extensions!.exception.errors);\n      }\n    },\n  });\n\n  function handleRegistration() {\n    registerUser();\n  }\n\n  return (\n    <form className=\"form\" onSubmit={onSubmit}>\n      <Heading size=\"xl\" className=\"text-centered\">\n        REGISTER\n      </Heading>\n      <div className=\"form-control\">\n        <CustomInputText\n          autoFocus\n          id=\"register-firstName\"\n          label=\"First Name\"\n          name=\"firstName\"\n          type=\"text\"\n          value={values.firstName}\n          handleChange={onChange}\n          error={errors.firstName}\n          required\n          styleClass=\"margin-r-md\"\n        />\n        <CustomInputText\n          id=\"register-lastName\"\n          label=\"Last Name\"\n          name=\"lastName\"\n          type=\"text\"\n          value={values.lastName}\n          handleChange={onChange}\n          error={errors.lastName}\n        />\n      </div>\n      <div className=\"form-control\">\n        <CustomInputText\n          handleChange={onChange}\n          id=\"register-username\"\n          label=\"Username\"\n          type=\"text\"\n          name=\"username\"\n          value={values.username}\n          error={errors.username}\n          required\n        />\n      </div>\n      <div className=\"form-control\">\n        <CustomInputText\n          handleChange={onChange}\n          id=\"register-email\"\n          label=\"Email\"\n          type=\"email\"\n          name=\"email\"\n          value={values.email}\n          error={errors.email}\n          required\n        />\n      </div>\n      <div className=\"form-control\">\n        <CustomInputText\n          handleChange={onChange}\n          id=\"register-password\"\n          label=\"Password\"\n          type=\"password\"\n          name=\"password\"\n          value={values.password}\n          error={errors.password}\n          required\n        />\n      </div>\n      <div className=\"form-control\">\n        <CustomInputText\n          id=\"register-confirmPassword\"\n          label=\"Confirm password\"\n          name=\"confirmPassword\"\n          type=\"password\"\n          value={values.confirmPassword}\n          handleChange={onChange}\n          error={errors.confirmPassword}\n          required\n        />\n      </div>\n      <div className=\"form-control margin-y-lg\">\n        <CustomButton type=\"submit\" styleClass=\"full-width\" color=\"success\">\n          <FontAwesomeIcon icon={faUserPlus} /> Register\n        </CustomButton>\n      </div>\n      <Text>\n        Already a member?\n        <Link to=\"/login\">\n          <span className=\"link\"> Sign in.</span>\n        </Link>\n      </Text>\n    </form>\n  );\n};\n\nconst REGISTER_USER = gql`\n  mutation(\n    $username: String!\n    $firstName: String!\n    $lastName: String!\n    $email: String!\n    $password: String!\n    $confirmPassword: String!\n  ) {\n    register(\n      registerInput: {\n        username: $username\n        firstName: $firstName\n        lastName: $lastName\n        email: $email\n        password: $password\n        confirmPassword: $confirmPassword\n      }\n    ) {\n      username\n      token\n      createdAt\n      firstName\n      lastName\n      email\n      id\n    }\n  }\n`;\n\nexport default RegisterForm;\n","/mnt/d/projects/Main Projects/social-media/app/client/src/containers/Forms/index.ts",[],"/mnt/d/projects/Main Projects/social-media/app/client/src/containers/Cards/CommentCard.tsx",["254"],"import React, { useState, useContext, Fragment } from \"react\";\r\nimport { gql, useMutation } from \"@apollo/client\";\r\nimport { faPenSquare, faTrash } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nimport { AuthContext } from \"../../AuthUser.context\";\r\nimport { GET_ALL_POSTS } from \"../../graphql\";\r\nimport { getDate } from \"../../utils/date\";\r\nimport { Modal } from \"../../components/Modal/Modal\";\r\n\r\nimport useModal from \"../../hooks/useModal\";\r\nimport {\r\n  Card,\r\n  CardContent,\r\n  CardMenu,\r\n  CardMeta,\r\n  CardTitle,\r\n} from \"../../components/Card\";\r\nimport { Heading, Text } from \"../../components/Typography\";\r\nimport CommentForm from \"../Forms/CommentForm\";\r\n\r\ninterface Props {\r\n  comment: {\r\n    id: string;\r\n    commentId: string;\r\n    body: string;\r\n    username: string;\r\n    firstName: string;\r\n    lastName: string;\r\n    createdAt: string;\r\n    edited: boolean;\r\n  };\r\n  postId: string;\r\n}\r\n\r\nconst CommentCard: React.FC<Props> = ({\r\n  comment: {\r\n    commentId,\r\n    body,\r\n    username,\r\n    firstName,\r\n    lastName,\r\n    createdAt,\r\n    edited,\r\n  },\r\n  postId,\r\n}) => {\r\n  const [showEditComment, setShowEditComment] = useState(false);\r\n  const { modalOpen, toggleModal } = useModal();\r\n  const { user } = useContext(AuthContext);\r\n\r\n  const [deleteComment, { loading }] = useMutation(DELETE_COMMENT, {\r\n    update(proxy, { data: { deleteComment: post } }) {\r\n      let queryData: any = proxy.readQuery({ query: GET_ALL_POSTS });\r\n\r\n      proxy.writeQuery({\r\n        query: GET_ALL_POSTS,\r\n        data: queryData,\r\n      });\r\n    },\r\n    onError(err) {\r\n      console.log(err);\r\n    },\r\n    variables: {\r\n      postId,\r\n      commentId,\r\n    },\r\n  });\r\n\r\n  let signedInUserComment = false;\r\n  if (user) {\r\n    signedInUserComment = user.username === username;\r\n  }\r\n\r\n  const cardMenuOptions = [\r\n    {\r\n      callback: () => setShowEditComment((show) => !show),\r\n      value: (\r\n        <span>\r\n          <FontAwesomeIcon icon={faPenSquare} /> Edit\r\n        </span>\r\n      ),\r\n    },\r\n    {\r\n      callback: toggleModal,\r\n      value: (\r\n        <span>\r\n          <FontAwesomeIcon icon={faTrash} /> Delete\r\n        </span>\r\n      ),\r\n    },\r\n  ];\r\n\r\n  return (\r\n    <Fragment>\r\n      <Modal\r\n        open={modalOpen}\r\n        onClose={toggleModal}\r\n        onCancel={toggleModal}\r\n        onConfirm={deleteComment}\r\n      >\r\n        <Text className=\"text-centered\" size=\"lg\">\r\n          Do you want to delete this comment?\r\n        </Text>\r\n      </Modal>\r\n      <Card>\r\n        {signedInUserComment && <CardMenu menuItems={cardMenuOptions} />}\r\n        <Link to={`/user/${username}`}>\r\n          <CardTitle>\r\n            <Heading size=\"xs\">\r\n              {firstName} {lastName}\r\n            </Heading>\r\n            <Heading size=\"xs\" className=\"link\">\r\n              &nbsp; @{username}\r\n            </Heading>\r\n          </CardTitle>\r\n        </Link>\r\n        <CardMeta>{getDate(createdAt)}</CardMeta>\r\n        <CardContent>\r\n          {showEditComment ? (\r\n            <CommentForm\r\n              isEdit\r\n              body={body}\r\n              postId={postId}\r\n              commentId={commentId}\r\n              callback={() => setShowEditComment((show) => !show)}\r\n            />\r\n          ) : (\r\n            <Text>\r\n              {body}\r\n              {edited && <em>(edited)</em>}\r\n            </Text>\r\n          )}\r\n        </CardContent>\r\n      </Card>\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nconst DELETE_COMMENT = gql`\r\n  mutation deleteComment($postId: ID!, $commentId: ID!) {\r\n    deleteComment(postId: $postId, commentId: $commentId) {\r\n      id\r\n    }\r\n  }\r\n`;\r\n\r\nexport default CommentCard;\r\n","/mnt/d/projects/Main Projects/social-media/app/client/src/containers/Cards/PostCard.tsx",["255"],"import React, { useState, useContext, Fragment } from \"react\";\r\nimport { gql, useMutation } from \"@apollo/client\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faPenSquare, faTrash } from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nimport { GET_ALL_POSTS } from \"../../graphql\";\r\nimport { PostType } from \"../../config/types\";\r\nimport { getDate } from \"../../utils/date\";\r\nimport { AuthContext } from \"../../AuthUser.context\";\r\nimport { useModal } from \"../../hooks\";\r\n\r\nimport { Modal } from \"../../components/Modal/Modal\";\r\nimport {\r\n  CommentButton,\r\n  LikeButton,\r\n  ShareButton,\r\n} from \"../../components/Button\";\r\nimport {\r\n  Card,\r\n  CardTitle,\r\n  CardMeta,\r\n  CardContent,\r\n  CardActions,\r\n  CardMenu,\r\n} from \"../../components/Card\";\r\nimport { PostForm } from \"../Forms\";\r\nimport { Heading, Text } from \"../../components/Typography\";\r\n\r\ninterface Props {\r\n  post: PostType;\r\n}\r\n\r\nconst PostCard: React.FC<Props> = ({\r\n  post: {\r\n    id,\r\n    edited,\r\n    firstName,\r\n    lastName,\r\n    username,\r\n    createdAt,\r\n    body,\r\n    likeCount,\r\n    commentCount,\r\n    likes,\r\n  },\r\n}) => {\r\n  const { user } = useContext(AuthContext);\r\n  const [editForm, setEditForm] = useState(false);\r\n  const { modalOpen, toggleModal } = useModal();\r\n\r\n  const [deletePost, { loading }] = useMutation(DELETE_POST, {\r\n    update(proxy, { data: { deletePost: post } }) {\r\n      let data: any = proxy.readQuery({ query: GET_ALL_POSTS });\r\n\r\n      proxy.writeQuery({\r\n        query: GET_ALL_POSTS,\r\n        data: {\r\n          getPosts: data.getPosts.filter(\r\n            (post: { id: string }) => id !== post.id\r\n          ),\r\n        },\r\n      });\r\n    },\r\n    onError(err) {\r\n      console.log(err);\r\n    },\r\n    variables: { postId: id },\r\n  });\r\n\r\n  let signedInUserPost = false;\r\n  if (user) {\r\n    signedInUserPost = user.username === username;\r\n  }\r\n\r\n  const cardMenuItems = [\r\n    {\r\n      callback: () => setEditForm(!editForm),\r\n      value: (\r\n        <span>\r\n          <FontAwesomeIcon icon={faPenSquare} /> Edit\r\n        </span>\r\n      ),\r\n    },\r\n    {\r\n      callback: toggleModal,\r\n      value: (\r\n        <span>\r\n          <FontAwesomeIcon icon={faTrash} /> Delete\r\n        </span>\r\n      ),\r\n    },\r\n  ];\r\n\r\n  return (\r\n    <Fragment>\r\n      <Modal\r\n        open={modalOpen}\r\n        onClose={toggleModal}\r\n        onCancel={toggleModal}\r\n        onConfirm={deletePost}\r\n      >\r\n        <Text className=\"text-centered\" size=\"lg\">\r\n          Do you want to delete this post?\r\n        </Text>\r\n      </Modal>\r\n      <Card>\r\n        {signedInUserPost && <CardMenu menuItems={cardMenuItems} />}\r\n        <Link to={`/user/${username}`}>\r\n          <CardTitle>\r\n            <Heading size=\"xs\">\r\n              {firstName} {lastName}\r\n            </Heading>\r\n            <Heading size=\"xs\" className=\"link\">\r\n              &nbsp;@{username}\r\n            </Heading>\r\n          </CardTitle>\r\n        </Link>\r\n\r\n        <CardMeta>{getDate(createdAt)}</CardMeta>\r\n\r\n        <CardContent>\r\n          {editForm ? (\r\n            <PostForm\r\n              isEdit\r\n              body={body}\r\n              postId={id}\r\n              callback={() => setEditForm(!editForm)}\r\n            />\r\n          ) : (\r\n            <Link to={`/post/${username}/${id}`}>\r\n              <Text size=\"xl\">\r\n                {body}\r\n                {edited && (\r\n                  <Text>\r\n                    <em>(edited)</em>\r\n                  </Text>\r\n                )}\r\n              </Text>\r\n            </Link>\r\n          )}\r\n        </CardContent>\r\n\r\n        <CardActions>\r\n          <ShareButton share={`http://localhost:3000/post/${username}/${id}`} />\r\n          <LikeButton\r\n            postId={id}\r\n            likes={likes}\r\n            likeCount={likeCount}\r\n            loggedInUser={user}\r\n          />\r\n          <CommentButton\r\n            count={commentCount}\r\n            redirect={user ? `/post/${username}/${id}` : \"/login\"}\r\n          />\r\n        </CardActions>\r\n      </Card>\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport const DELETE_POST = gql`\r\n  mutation deletePost($postId: ID!) {\r\n    deletePost(postId: $postId) {\r\n      id\r\n      body\r\n      username\r\n      firstName\r\n      lastName\r\n      edited\r\n      createdAt\r\n      likeCount\r\n      likes {\r\n        id\r\n        username\r\n      }\r\n      commentCount\r\n      comments {\r\n        id\r\n        commentId\r\n        body\r\n        username\r\n        firstName\r\n        lastName\r\n        createdAt\r\n        edited\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nexport default PostCard;\r\n","/mnt/d/projects/Main Projects/social-media/app/client/src/containers/Cards/index.ts",[],"/mnt/d/projects/Main Projects/social-media/app/client/src/components/Layout/index.ts",[],"/mnt/d/projects/Main Projects/social-media/app/client/src/components/Layout/Container.tsx",[],{"ruleId":"256","replacedBy":"257"},{"ruleId":"258","replacedBy":"259"},{"ruleId":"260","severity":1,"message":"261","line":18,"column":6,"nodeType":"262","endLine":18,"endColumn":11,"suggestions":"263"},{"ruleId":"260","severity":1,"message":"264","line":25,"column":3,"nodeType":"265","endLine":25,"endColumn":12,"suggestions":"266"},{"ruleId":"260","severity":1,"message":"267","line":52,"column":6,"nodeType":"262","endLine":52,"endColumn":22,"suggestions":"268"},{"ruleId":"269","severity":1,"message":"270","line":54,"column":36,"nodeType":"265","messageId":"271","endLine":54,"endColumn":49},{"ruleId":"269","severity":1,"message":"272","line":67,"column":34,"nodeType":"265","messageId":"271","endLine":67,"endColumn":45},{"ruleId":"269","severity":1,"message":"273","line":32,"column":23,"nodeType":"265","messageId":"271","endLine":32,"endColumn":30},{"ruleId":"260","severity":1,"message":"267","line":44,"column":6,"nodeType":"262","endLine":44,"endColumn":19,"suggestions":"274"},{"ruleId":"269","severity":1,"message":"273","line":46,"column":24,"nodeType":"265","messageId":"271","endLine":46,"endColumn":31},{"ruleId":"269","severity":1,"message":"275","line":62,"column":29,"nodeType":"265","messageId":"271","endLine":62,"endColumn":38},{"ruleId":"269","severity":1,"message":"273","line":45,"column":26,"nodeType":"265","messageId":"271","endLine":45,"endColumn":33},{"ruleId":"269","severity":1,"message":"273","line":53,"column":27,"nodeType":"265","messageId":"271","endLine":53,"endColumn":34},{"ruleId":"269","severity":1,"message":"273","line":52,"column":24,"nodeType":"265","messageId":"271","endLine":52,"endColumn":31},"no-native-reassign",["276"],"no-negated-in-lhs",["277"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'callback'. Either include it or remove the dependency array. If 'callback' changes too often, find the parent component that defines it and wrap that definition in useCallback.","ArrayExpression",["278"],"React Hook useEffect contains a call to 'setisLiked'. Without a list of dependencies, this can lead to an infinite chain of updates. To fix this, pass [loggedInUser, likes] as a second argument to the useEffect Hook.","Identifier",["279"],"React Hook useEffect has a missing dependency: 'error'. Either include it or remove the dependency array.",["280"],"@typescript-eslint/no-unused-vars","'createLoading' is assigned a value but never used.","unusedVar","'editLoading' is assigned a value but never used.","'loading' is assigned a value but never used.",["281"],"'editError' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"282","fix":"283"},{"desc":"284","fix":"285"},{"desc":"286","fix":"287"},{"desc":"288","fix":"289"},"Update the dependencies array to be: [callback, ref]",{"range":"290","text":"291"},"Add dependencies array: [loggedInUser, likes]",{"range":"292","text":"293"},"Update the dependencies array to be: [error, values.comment]",{"range":"294","text":"295"},"Update the dependencies array to be: [error, values.body]",{"range":"296","text":"297"},[480,485],"[callback, ref]",[849,849],", [loggedInUser, likes]",[1308,1324],"[error, values.comment]",[1362,1375],"[error, values.body]"]