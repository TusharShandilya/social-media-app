[{"/mnt/d/projects/Main Projects/social-media/app/client/src/index.tsx":"1","/mnt/d/projects/Main Projects/social-media/app/client/src/App.tsx":"2","/mnt/d/projects/Main Projects/social-media/app/client/src/utils/ApolloClient.ts":"3","/mnt/d/projects/Main Projects/social-media/app/client/src/components/Navbar.tsx":"4","/mnt/d/projects/Main Projects/social-media/app/client/src/utils/cookies.ts":"5","/mnt/d/projects/Main Projects/social-media/app/client/src/pages/Home.tsx":"6","/mnt/d/projects/Main Projects/social-media/app/client/src/pages/Register.tsx":"7","/mnt/d/projects/Main Projects/social-media/app/client/src/pages/Login.tsx":"8","/mnt/d/projects/Main Projects/social-media/app/client/src/components/Forms/RegisterForm.tsx":"9","/mnt/d/projects/Main Projects/social-media/app/client/src/components/Forms/LoginForm.tsx":"10","/mnt/d/projects/Main Projects/social-media/app/client/src/hooks/useForm.ts":"11","/mnt/d/projects/Main Projects/social-media/app/client/src/components/AuthRoute.tsx":"12","/mnt/d/projects/Main Projects/social-media/app/client/src/AuthUser.context.tsx":"13","/mnt/d/projects/Main Projects/social-media/app/client/src/components/Forms/PostForm.tsx":"14","/mnt/d/projects/Main Projects/social-media/app/client/src/utils/graphql.ts":"15","/mnt/d/projects/Main Projects/social-media/app/client/src/components/PostCard.tsx":"16","/mnt/d/projects/Main Projects/social-media/app/client/src/components/LikeButton.tsx":"17","/mnt/d/projects/Main Projects/social-media/app/client/src/pages/SingleUser.tsx":"18","/mnt/d/projects/Main Projects/social-media/app/client/src/pages/SinglePost.tsx":"19","/mnt/d/projects/Main Projects/social-media/app/client/src/components/Forms/CommentForm.tsx":"20","/mnt/d/projects/Main Projects/social-media/app/client/src/components/Comment.tsx":"21","/mnt/d/projects/Main Projects/social-media/app/client/src/components/CommentButton.tsx":"22","/mnt/d/projects/Main Projects/social-media/app/client/src/components/ConfirmModal.tsx":"23","/mnt/d/projects/Main Projects/social-media/app/client/src/Routes.tsx":"24","/mnt/d/projects/Main Projects/social-media/app/client/src/components/Logo.tsx":"25","/mnt/d/projects/Main Projects/social-media/app/client/src/components/Links.tsx":"26","/mnt/d/projects/Main Projects/social-media/app/client/src/components/CustomButton.tsx":"27","/mnt/d/projects/Main Projects/social-media/app/client/src/components/CustomInputText.tsx":"28","/mnt/d/projects/Main Projects/social-media/app/client/src/pages/NewPost.tsx":"29"},{"size":219,"mtime":1609481171999,"results":"30","hashOfConfig":"31"},{"size":570,"mtime":1610089377729,"results":"32","hashOfConfig":"31"},{"size":601,"mtime":1609770634153,"results":"33","hashOfConfig":"31"},{"size":354,"mtime":1610103442676,"results":"34","hashOfConfig":"31"},{"size":723,"mtime":1609481172096,"results":"35","hashOfConfig":"31"},{"size":973,"mtime":1610296954964,"results":"36","hashOfConfig":"31"},{"size":285,"mtime":1610280969122,"results":"37","hashOfConfig":"31"},{"size":269,"mtime":1610280957744,"results":"38","hashOfConfig":"31"},{"size":4510,"mtime":1610350750973,"results":"39","hashOfConfig":"31"},{"size":2693,"mtime":1610350712844,"results":"40","hashOfConfig":"31"},{"size":581,"mtime":1610296742964,"results":"41","hashOfConfig":"31"},{"size":829,"mtime":1610298179153,"results":"42","hashOfConfig":"31"},{"size":1623,"mtime":1609581014216,"results":"43","hashOfConfig":"31"},{"size":3094,"mtime":1610350532648,"results":"44","hashOfConfig":"31"},{"size":468,"mtime":1609583256065,"results":"45","hashOfConfig":"31"},{"size":5152,"mtime":1610350859002,"results":"46","hashOfConfig":"31"},{"size":1970,"mtime":1610350009222,"results":"47","hashOfConfig":"31"},{"size":1784,"mtime":1610280995048,"results":"48","hashOfConfig":"31"},{"size":2072,"mtime":1610296893992,"results":"49","hashOfConfig":"31"},{"size":2944,"mtime":1610350222962,"results":"50","hashOfConfig":"31"},{"size":3470,"mtime":1610348972708,"results":"51","hashOfConfig":"31"},{"size":732,"mtime":1610350091912,"results":"52","hashOfConfig":"31"},{"size":1631,"mtime":1610350657146,"results":"53","hashOfConfig":"31"},{"size":859,"mtime":1610297640636,"results":"54","hashOfConfig":"31"},{"size":361,"mtime":1610116983521,"results":"55","hashOfConfig":"31"},{"size":1819,"mtime":1610349807505,"results":"56","hashOfConfig":"31"},{"size":856,"mtime":1610280452640,"results":"57","hashOfConfig":"31"},{"size":1550,"mtime":1610296606084,"results":"58","hashOfConfig":"31"},{"size":284,"mtime":1610297088184,"results":"59","hashOfConfig":"31"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},"5ctubq",{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"73","usedDeprecatedRules":"62"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"80","messages":"81","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"82","usedDeprecatedRules":"62"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"95","messages":"96","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"103","usedDeprecatedRules":"62"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"106","usedDeprecatedRules":"62"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"109","messages":"110","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"111","messages":"112","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},"/mnt/d/projects/Main Projects/social-media/app/client/src/index.tsx",[],["123","124"],"/mnt/d/projects/Main Projects/social-media/app/client/src/App.tsx",[],"/mnt/d/projects/Main Projects/social-media/app/client/src/utils/ApolloClient.ts",[],"/mnt/d/projects/Main Projects/social-media/app/client/src/components/Navbar.tsx",[],"/mnt/d/projects/Main Projects/social-media/app/client/src/utils/cookies.ts",[],"/mnt/d/projects/Main Projects/social-media/app/client/src/pages/Home.tsx",["125","126"],"import React, { useContext } from \"react\";\nimport { useQuery } from \"@apollo/client\";\n\nimport PostCard from \"../components/PostCard\";\nimport { Post } from \"../utils/types\";\nimport PostForm from \"../components/Forms/PostForm\";\nimport { AuthContext } from \"../AuthUser.context\";\nimport { GET_ALL_POSTS } from \"../utils/graphql\";\n\nconst Home: React.FC = () => {\n  const { user } = useContext(AuthContext);\n  const { loading, data } = useQuery(GET_ALL_POSTS);\n\n  return (\n    <div className=\"page\">\n      <div className=\"page-container\">\n        <h1 className=\"text-centered heading-primary\">All posts</h1>\n        {/* {user && <PostForm />} */}\n        {loading ? (\n          <h1>Loading...</h1>\n        ) : (\n          data?.getPosts.map((post: Post) => (\n            <div className=\"grid\">\n              <PostCard key={post.id} post={post} />\n            </div>\n          )) ?? <h1>An error has occurred</h1>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default Home;\n","/mnt/d/projects/Main Projects/social-media/app/client/src/pages/Register.tsx",[],"/mnt/d/projects/Main Projects/social-media/app/client/src/pages/Login.tsx",[],"/mnt/d/projects/Main Projects/social-media/app/client/src/components/Forms/RegisterForm.tsx",["127"],"/mnt/d/projects/Main Projects/social-media/app/client/src/components/Forms/LoginForm.tsx",["128"],"import React from \"react\";\nimport { gql, useMutation } from \"@apollo/client\";\nimport { Link } from \"react-router-dom\";\n\nimport { AuthContext } from \"../../AuthUser.context\";\nimport useForm from \"../../hooks/useForm\";\nimport CustomInputText from \"../CustomInputText\";\nimport CustomButton from \"../CustomButton\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faSignInAlt } from \"@fortawesome/free-solid-svg-icons\";\n\ninterface LoginFormValues {\n  username: string;\n  password: string;\n}\n\nconst LoginForm: React.FC = () => {\n  const context = React.useContext(AuthContext);\n  const [errors, setErrors] = React.useState<{ general: string }>({\n    general: \"\",\n  });\n  const { values, onSubmit, onChange } = useForm<LoginFormValues>(\n    {\n      username: \"\",\n      password: \"\",\n    },\n    handleLogin\n  );\n\n  const [loginUser, { loading }] = useMutation(LOGIN_USER, {\n    update(_, { data: { login: userData } }) {\n      context.login(userData);\n    },\n    onError({ graphQLErrors, networkError }) {\n      if (graphQLErrors) {\n        setErrors(graphQLErrors[0].extensions!.exception.errors);\n      }\n    },\n    variables: values,\n  });\n\n  function handleLogin() {\n    loginUser();\n  }\n\n  return (\n    <form className=\"form\" onSubmit={onSubmit}>\n      <h1 className=\"heading-primary  text-centered\">LOGIN</h1>\n\n      {errors.general !== \"\" && (\n        <h4 className=\"input-text__error\">{errors.general}</h4>\n      )}\n      <div className=\"form-control\">\n        <CustomInputText\n          id=\"login-username\"\n          label=\"Username\"\n          type=\"text\"\n          name=\"username\"\n          value={values.username}\n          handleChange={onChange}\n          required\n          autoFocus\n        />\n      </div>\n      <div className=\"form-control\">\n        <CustomInputText\n          id=\"login-password\"\n          label=\"Password\"\n          type=\"password\"\n          name=\"password\"\n          value={values.password}\n          handleChange={onChange}\n          required\n        />\n      </div>\n      <div className=\"form-control margin-y-lg\">\n        <CustomButton type=\"submit\" styleClass=\"full-width\" color=\"success\">\n          <FontAwesomeIcon icon={faSignInAlt} /> Login\n        </CustomButton>\n      </div>\n      <p className=\"paragraph\">\n        Not a member?\n        <Link to=\"/register\">\n          <span className=\"link\"> Sign up now.</span>\n        </Link>\n      </p>\n    </form>\n  );\n};\n\nconst LOGIN_USER = gql`\n  mutation($username: String!, $password: String!) {\n    login(username: $username, password: $password) {\n      id\n      username\n      firstName\n      lastName\n      token\n      email\n      createdAt\n    }\n  }\n`;\n\nexport default LoginForm;\n","/mnt/d/projects/Main Projects/social-media/app/client/src/hooks/useForm.ts",[],"/mnt/d/projects/Main Projects/social-media/app/client/src/components/AuthRoute.tsx",[],"/mnt/d/projects/Main Projects/social-media/app/client/src/AuthUser.context.tsx",[],"/mnt/d/projects/Main Projects/social-media/app/client/src/components/Forms/PostForm.tsx",["129","130"],"/mnt/d/projects/Main Projects/social-media/app/client/src/utils/graphql.ts",[],"/mnt/d/projects/Main Projects/social-media/app/client/src/components/PostCard.tsx",["131"],"/mnt/d/projects/Main Projects/social-media/app/client/src/components/LikeButton.tsx",["132"],"/mnt/d/projects/Main Projects/social-media/app/client/src/pages/SingleUser.tsx",[],"/mnt/d/projects/Main Projects/social-media/app/client/src/pages/SinglePost.tsx",[],"/mnt/d/projects/Main Projects/social-media/app/client/src/components/Forms/CommentForm.tsx",["133","134"],"import React from \"react\";\r\nimport { gql, useMutation } from \"@apollo/client\";\r\n\r\nimport useForm from \"../../hooks/useForm\";\r\nimport CustomInputText from \"../CustomInputText\";\r\nimport CustomButton from \"../CustomButton\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faComment, faCommentDots } from \"@fortawesome/free-solid-svg-icons\";\r\n\r\ninterface Props {\r\n  postId: string;\r\n  isEdit?: boolean;\r\n  body?: string;\r\n  commentId?: string;\r\n  callback?: () => void;\r\n}\r\n\r\nconst CommentForm: React.FC<Props> = ({\r\n  postId,\r\n  body,\r\n  callback,\r\n  commentId,\r\n  isEdit,\r\n}) => {\r\n  const { values, onSubmit, onChange } = useForm<{ comment: string }>(\r\n    {\r\n      comment: body ?? \"\",\r\n    },\r\n    handleFormSubmit\r\n  );\r\n\r\n  const [createComment, { loading: createLoading }] = useMutation(\r\n    CREATE_COMMENT,\r\n    {\r\n      update(_, { data: { createComment: post } }) {\r\n        values.comment = \"\";\r\n      },\r\n      variables: {\r\n        body: values.comment,\r\n        postId,\r\n      },\r\n    }\r\n  );\r\n\r\n  const [editComment, { loading: editLoading }] = useMutation(EDIT_COMMENT, {\r\n    update(_, { data: { editComment: post } }) {},\r\n    variables: {\r\n      postId,\r\n      commentId,\r\n      body: values.comment,\r\n    },\r\n  });\r\n\r\n  function handleFormSubmit() {\r\n    if (isEdit) {\r\n      editComment();\r\n      if (callback) {\r\n        callback();\r\n      }\r\n    } else {\r\n      createComment();\r\n    }\r\n  }\r\n\r\n  return (\r\n    <form className=\"form form-comment\" onSubmit={onSubmit}>\r\n      <div className=\"form-control\">\r\n        <CustomInputText\r\n          id=\"comment\"\r\n          label=\"Comment\"\r\n          name=\"comment\"\r\n          type=\"text\"\r\n          value={values.comment}\r\n          handleChange={onChange}\r\n          required\r\n        />\r\n      </div>\r\n      <div className=\"form-control\">\r\n        <CustomButton type=\"submit\">\r\n          <FontAwesomeIcon icon={isEdit ? faCommentDots : faComment} />{\" \"}\r\n          {isEdit ? \"Edit Comment\" : \"Comment\"}\r\n        </CustomButton>\r\n      </div>\r\n    </form>\r\n  );\r\n};\r\n\r\nconst CREATE_COMMENT = gql`\r\n  mutation createComment($postId: ID!, $body: String!) {\r\n    createComment(postId: $postId, body: $body) {\r\n      id\r\n      body\r\n      username\r\n      firstName\r\n      lastName\r\n      edited\r\n      createdAt\r\n      likeCount\r\n      likes {\r\n        id\r\n        username\r\n      }\r\n      commentCount\r\n      comments {\r\n        id\r\n        commentId\r\n        body\r\n        username\r\n        firstName\r\n        lastName\r\n        createdAt\r\n        edited\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nconst EDIT_COMMENT = gql`\r\n  mutation($postId: ID!, $commentId: ID!, $body: String!) {\r\n    editComment(postId: $postId, commentId: $commentId, body: $body) {\r\n      comments {\r\n        id\r\n        commentId\r\n        body\r\n        username\r\n        firstName\r\n        lastName\r\n        createdAt\r\n        edited\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nexport default CommentForm;\r\n","/mnt/d/projects/Main Projects/social-media/app/client/src/components/Comment.tsx",["135"],"import { gql, useMutation } from \"@apollo/client\";\r\nimport React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nimport { AuthContext } from \"../AuthUser.context\";\r\nimport { GET_ALL_POSTS } from \"../utils/graphql\";\r\nimport ConfirmModal from \"./ConfirmModal\";\r\nimport CommentForm from \"./Forms/CommentForm\";\r\n\r\ninterface Props {\r\n  comment: {\r\n    id: string;\r\n    commentId: string;\r\n    body: string;\r\n    username: string;\r\n    firstName: string;\r\n    lastName: string;\r\n    createdAt: string;\r\n    edited: boolean;\r\n  };\r\n  postId: string;\r\n}\r\n\r\nconst Comment: React.FC<Props> = ({\r\n  comment: {\r\n    commentId,\r\n    body,\r\n    username,\r\n    firstName,\r\n    lastName,\r\n    createdAt,\r\n    edited,\r\n  },\r\n  postId,\r\n}) => {\r\n  const [showEditComment, setShowEditComment] = React.useState(false);\r\n  const [modalOpen, setModalOpen] = React.useState(false);\r\n  const { user } = React.useContext(AuthContext);\r\n\r\n  const [deleteComment, { loading }] = useMutation(DELETE_COMMENT, {\r\n    update(proxy, { data: { deleteComment: post } }) {\r\n      let queryData: any = proxy.readQuery({ query: GET_ALL_POSTS });\r\n\r\n      proxy.writeQuery({\r\n        query: GET_ALL_POSTS,\r\n        data: queryData,\r\n      });\r\n    },\r\n    onError(err) {\r\n      console.log(err);\r\n    },\r\n    variables: {\r\n      postId,\r\n      commentId,\r\n    },\r\n  });\r\n\r\n  let signedInUserComment = false;\r\n  if (user) {\r\n    signedInUserComment = user.username === username;\r\n  }\r\n\r\n  return (\r\n    <div className=\"comment\">\r\n      <ConfirmModal\r\n        open={modalOpen}\r\n        onClose={() => setModalOpen(false)}\r\n        onCancel={() => setModalOpen(false)}\r\n        onConfirm={deleteComment}\r\n      >\r\n        Do you want to delete this comment?\r\n      </ConfirmModal>\r\n      {user && signedInUserComment && (\r\n        <div className=\"comment__menu\">\r\n          <ul className=\"comment__menu-items\">\r\n            <li\r\n              className=\"comment__menu-item\"\r\n              onClick={() => setShowEditComment((show) => !show)}\r\n            >\r\n              Edit\r\n            </li>\r\n            <li\r\n              className=\"comment__menu-item\"\r\n              onClick={() => setModalOpen(true)}\r\n            >\r\n              Delete\r\n            </li>\r\n          </ul>\r\n        </div>\r\n      )}\r\n      <span className=\"comment__title\">\r\n        {firstName} {lastName}\r\n      </span>\r\n      <span className=\"comment__subtitle\">\r\n        <Link to={`/user/${username}`}>@{username}</Link>\r\n      </span>\r\n      <span className=\"comment__meta\">\r\n        {new Date(createdAt).toLocaleDateString(\"en-gb\", {\r\n          year: \"numeric\",\r\n          month: \"long\",\r\n          day: \"numeric\",\r\n        })}\r\n      </span>\r\n      {showEditComment ? (\r\n        <CommentForm\r\n          isEdit\r\n          body={body}\r\n          postId={postId}\r\n          commentId={commentId}\r\n          callback={() => setShowEditComment((show) => !show)}\r\n        />\r\n      ) : (\r\n        <p className=\"comment__description\">\r\n          {edited && <em>(edited)</em>}\r\n          {body}\r\n        </p>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nconst DELETE_COMMENT = gql`\r\n  mutation deleteComment($postId: ID!, $commentId: ID!) {\r\n    deleteComment(postId: $postId, commentId: $commentId) {\r\n      id\r\n      commentCount\r\n      comments {\r\n        id\r\n        commentId\r\n        body\r\n        username\r\n        firstName\r\n        lastName\r\n        createdAt\r\n        edited\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nexport default Comment;\r\n","/mnt/d/projects/Main Projects/social-media/app/client/src/components/CommentButton.tsx",[],"/mnt/d/projects/Main Projects/social-media/app/client/src/components/ConfirmModal.tsx",[],"/mnt/d/projects/Main Projects/social-media/app/client/src/Routes.tsx",[],"/mnt/d/projects/Main Projects/social-media/app/client/src/components/Logo.tsx",[],"/mnt/d/projects/Main Projects/social-media/app/client/src/components/Links.tsx",[],"/mnt/d/projects/Main Projects/social-media/app/client/src/components/CustomButton.tsx",[],"/mnt/d/projects/Main Projects/social-media/app/client/src/components/CustomInputText.tsx",[],"/mnt/d/projects/Main Projects/social-media/app/client/src/pages/NewPost.tsx",[],{"ruleId":"136","replacedBy":"137"},{"ruleId":"138","replacedBy":"139"},{"ruleId":"140","severity":1,"message":"141","line":6,"column":8,"nodeType":"142","messageId":"143","endLine":6,"endColumn":16},{"ruleId":"140","severity":1,"message":"144","line":11,"column":11,"nodeType":"142","messageId":"143","endLine":11,"endColumn":15},{"ruleId":"140","severity":1,"message":"145","line":43,"column":26,"nodeType":"142","messageId":"143","endLine":43,"endColumn":33},{"ruleId":"140","severity":1,"message":"145","line":30,"column":23,"nodeType":"142","messageId":"143","endLine":30,"endColumn":30},{"ruleId":"140","severity":1,"message":"145","line":28,"column":24,"nodeType":"142","messageId":"143","endLine":28,"endColumn":31},{"ruleId":"140","severity":1,"message":"146","line":44,"column":22,"nodeType":"142","messageId":"143","endLine":44,"endColumn":27},{"ruleId":"140","severity":1,"message":"145","line":50,"column":24,"nodeType":"142","messageId":"143","endLine":50,"endColumn":31},{"ruleId":"147","severity":1,"message":"148","line":20,"column":3,"nodeType":"142","endLine":20,"endColumn":12,"suggestions":"149"},{"ruleId":"140","severity":1,"message":"150","line":32,"column":36,"nodeType":"142","messageId":"143","endLine":32,"endColumn":49},{"ruleId":"140","severity":1,"message":"151","line":45,"column":34,"nodeType":"142","messageId":"143","endLine":45,"endColumn":45},{"ruleId":"140","severity":1,"message":"145","line":40,"column":27,"nodeType":"142","messageId":"143","endLine":40,"endColumn":34},"no-native-reassign",["152"],"no-negated-in-lhs",["153"],"@typescript-eslint/no-unused-vars","'PostForm' is defined but never used.","Identifier","unusedVar","'user' is assigned a value but never used.","'loading' is assigned a value but never used.","'error' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect contains a call to 'setisLiked'. Without a list of dependencies, this can lead to an infinite chain of updates. To fix this, pass [user, likes] as a second argument to the useEffect Hook.",["154"],"'createLoading' is assigned a value but never used.","'editLoading' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"155","fix":"156"},"Add dependencies array: [user, likes]",{"range":"157","text":"158"},[793,793],", [user, likes]"]