[{"/mnt/d/projects/Main Projects/social-media/app/client/src/index.tsx":"1","/mnt/d/projects/Main Projects/social-media/app/client/src/App.tsx":"2","/mnt/d/projects/Main Projects/social-media/app/client/src/utils/ApolloClient.ts":"3","/mnt/d/projects/Main Projects/social-media/app/client/src/components/Navbar.tsx":"4","/mnt/d/projects/Main Projects/social-media/app/client/src/utils/cookies.ts":"5","/mnt/d/projects/Main Projects/social-media/app/client/src/pages/Home.tsx":"6","/mnt/d/projects/Main Projects/social-media/app/client/src/pages/Register.tsx":"7","/mnt/d/projects/Main Projects/social-media/app/client/src/pages/Login.tsx":"8","/mnt/d/projects/Main Projects/social-media/app/client/src/components/Forms/RegisterForm.tsx":"9","/mnt/d/projects/Main Projects/social-media/app/client/src/components/Forms/LoginForm.tsx":"10","/mnt/d/projects/Main Projects/social-media/app/client/src/hooks/useForm.ts":"11","/mnt/d/projects/Main Projects/social-media/app/client/src/components/AuthRoute.tsx":"12","/mnt/d/projects/Main Projects/social-media/app/client/src/AuthUser.context.tsx":"13","/mnt/d/projects/Main Projects/social-media/app/client/src/components/Forms/PostForm.tsx":"14","/mnt/d/projects/Main Projects/social-media/app/client/src/utils/graphql.ts":"15","/mnt/d/projects/Main Projects/social-media/app/client/src/components/PostCard.tsx":"16","/mnt/d/projects/Main Projects/social-media/app/client/src/components/LikeButton.tsx":"17","/mnt/d/projects/Main Projects/social-media/app/client/src/pages/SingleUser.tsx":"18","/mnt/d/projects/Main Projects/social-media/app/client/src/pages/SinglePost.tsx":"19","/mnt/d/projects/Main Projects/social-media/app/client/src/components/Forms/CommentForm.tsx":"20","/mnt/d/projects/Main Projects/social-media/app/client/src/components/Comment.tsx":"21","/mnt/d/projects/Main Projects/social-media/app/client/src/components/CommentButton.tsx":"22","/mnt/d/projects/Main Projects/social-media/app/client/src/components/ConfirmModal.tsx":"23","/mnt/d/projects/Main Projects/social-media/app/client/src/Routes.tsx":"24","/mnt/d/projects/Main Projects/social-media/app/client/src/components/Logo.tsx":"25","/mnt/d/projects/Main Projects/social-media/app/client/src/components/Links.tsx":"26","/mnt/d/projects/Main Projects/social-media/app/client/src/components/CustomButton.tsx":"27","/mnt/d/projects/Main Projects/social-media/app/client/src/components/CustomInputText.tsx":"28","/mnt/d/projects/Main Projects/social-media/app/client/src/pages/NewPost.tsx":"29","/mnt/d/projects/Main Projects/social-media/app/client/src/components/Layout.tsx":"30","/mnt/d/projects/Main Projects/social-media/app/client/src/components/CardMenu.tsx":"31","/mnt/d/projects/Main Projects/social-media/app/client/src/hooks/useOutsideAlerter.ts":"32","/mnt/d/projects/Main Projects/social-media/app/client/src/utils/date.ts":"33"},{"size":219,"mtime":1609481171999,"results":"34","hashOfConfig":"35"},{"size":570,"mtime":1610356199398,"results":"36","hashOfConfig":"35"},{"size":601,"mtime":1609770634153,"results":"37","hashOfConfig":"35"},{"size":354,"mtime":1610103442676,"results":"38","hashOfConfig":"35"},{"size":723,"mtime":1609481172096,"results":"39","hashOfConfig":"35"},{"size":834,"mtime":1610367540376,"results":"40","hashOfConfig":"35"},{"size":264,"mtime":1610356529984,"results":"41","hashOfConfig":"35"},{"size":247,"mtime":1610356511753,"results":"42","hashOfConfig":"35"},{"size":4510,"mtime":1610350750973,"results":"43","hashOfConfig":"35"},{"size":2693,"mtime":1610350712844,"results":"44","hashOfConfig":"35"},{"size":581,"mtime":1610296742964,"results":"45","hashOfConfig":"35"},{"size":829,"mtime":1610298179153,"results":"46","hashOfConfig":"35"},{"size":1623,"mtime":1609581014216,"results":"47","hashOfConfig":"35"},{"size":3094,"mtime":1610350532648,"results":"48","hashOfConfig":"35"},{"size":468,"mtime":1609583256065,"results":"49","hashOfConfig":"35"},{"size":4905,"mtime":1610385030557,"results":"50","hashOfConfig":"35"},{"size":1970,"mtime":1610350009222,"results":"51","hashOfConfig":"35"},{"size":1797,"mtime":1610368589811,"results":"52","hashOfConfig":"35"},{"size":1945,"mtime":1610368211195,"results":"53","hashOfConfig":"35"},{"size":2944,"mtime":1610350222962,"results":"54","hashOfConfig":"35"},{"size":3816,"mtime":1610367791884,"results":"55","hashOfConfig":"35"},{"size":732,"mtime":1610350091912,"results":"56","hashOfConfig":"35"},{"size":1631,"mtime":1610350657146,"results":"57","hashOfConfig":"35"},{"size":859,"mtime":1610356292357,"results":"58","hashOfConfig":"35"},{"size":361,"mtime":1610116983521,"results":"59","hashOfConfig":"35"},{"size":1819,"mtime":1610349807505,"results":"60","hashOfConfig":"35"},{"size":856,"mtime":1610280452640,"results":"61","hashOfConfig":"35"},{"size":1550,"mtime":1610296606084,"results":"62","hashOfConfig":"35"},{"size":273,"mtime":1610356364506,"results":"63","hashOfConfig":"35"},{"size":370,"mtime":1610385125428,"results":"64","hashOfConfig":"35"},{"size":1198,"mtime":1610385206484,"results":"65","hashOfConfig":"35"},{"size":507,"mtime":1610365820162,"results":"66","hashOfConfig":"35"},{"size":235,"mtime":1610366331154,"results":"67","hashOfConfig":"35"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},"5ctubq",{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"81","usedDeprecatedRules":"70"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"88","usedDeprecatedRules":"70"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"91","usedDeprecatedRules":"70"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"100","usedDeprecatedRules":"70"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"105","usedDeprecatedRules":"70"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"108","usedDeprecatedRules":"70"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"113","usedDeprecatedRules":"70"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"116","usedDeprecatedRules":"70"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"119","usedDeprecatedRules":"70"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"132","messages":"133","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"134","messages":"135","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"138","usedDeprecatedRules":"70"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"141","messages":"142","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"143","usedDeprecatedRules":"144"},{"filePath":"145","messages":"146","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},"/mnt/d/projects/Main Projects/social-media/app/client/src/index.tsx",[],["147","148"],"/mnt/d/projects/Main Projects/social-media/app/client/src/App.tsx",[],"/mnt/d/projects/Main Projects/social-media/app/client/src/utils/ApolloClient.ts",[],"/mnt/d/projects/Main Projects/social-media/app/client/src/components/Navbar.tsx",[],"/mnt/d/projects/Main Projects/social-media/app/client/src/utils/cookies.ts",[],"/mnt/d/projects/Main Projects/social-media/app/client/src/pages/Home.tsx",["149"],"import React, { useContext } from \"react\";\nimport { useQuery } from \"@apollo/client\";\n\nimport PostCard from \"../components/PostCard\";\nimport { Post } from \"../utils/types\";\n\nimport { GET_ALL_POSTS } from \"../utils/graphql\";\nimport Layout from \"../components/Layout\";\n\nconst Home: React.FC = () => {\n  const { loading, data } = useQuery(GET_ALL_POSTS);\n\n  return (\n    <Layout hasSidebar>\n      <h1 className=\"text-centered heading-primary\">All posts</h1>\n      <div className=\"scrollable-container\">\n        {loading ? (\n          <h1>Loading...</h1>\n        ) : (\n          data?.getPosts.map((post: Post) => (\n            <div className=\"grid\">\n              <PostCard key={post.id} post={post} />\n            </div>\n          )) ?? <h1>An error has occurred</h1>\n        )}\n      </div>\n    </Layout>\n  );\n};\n\nexport default Home;\n","/mnt/d/projects/Main Projects/social-media/app/client/src/pages/Register.tsx",[],"/mnt/d/projects/Main Projects/social-media/app/client/src/pages/Login.tsx",[],"/mnt/d/projects/Main Projects/social-media/app/client/src/components/Forms/RegisterForm.tsx",["150"],"import React from \"react\";\nimport { gql, useMutation } from \"@apollo/client\";\n\nimport { AuthContext } from \"../../AuthUser.context\";\nimport useForm from \"../../hooks/useForm\";\nimport CustomInputText from \"../CustomInputText\";\nimport CustomButton from \"../CustomButton\";\nimport { Link } from \"react-router-dom\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faUserPlus } from \"@fortawesome/free-solid-svg-icons\";\n\ninterface RegisterFormValues {\n  firstName: string;\n  lastName: string;\n  username: string;\n  email: string;\n  password: string;\n  confirmPassword: string;\n}\n\nconst RegisterForm: React.FC = () => {\n  const context = React.useContext(AuthContext);\n  const [errors, setErrors] = React.useState<RegisterFormValues>({\n    firstName: \"\",\n    lastName: \"\",\n    username: \"\",\n    email: \"\",\n    password: \"\",\n    confirmPassword: \"\",\n  });\n  const { values, onSubmit, onChange } = useForm<RegisterFormValues>(\n    {\n      firstName: \"\",\n      lastName: \"\",\n      username: \"\",\n      email: \"\",\n      password: \"\",\n      confirmPassword: \"\",\n    },\n    handleRegistration\n  );\n\n  const [registerUser, { loading }] = useMutation(REGISTER_USER, {\n    update(_, { data: { register: userData } }) {\n      context.login(userData);\n    },\n    variables: values,\n    onError({ graphQLErrors, networkError }) {\n      if (graphQLErrors) {\n        setErrors(graphQLErrors[0].extensions!.exception.errors);\n      }\n    },\n  });\n\n  function handleRegistration() {\n    registerUser();\n  }\n\n  return (\n    <form className=\"form\" onSubmit={onSubmit}>\n      <h1 className=\"heading-primary  text-centered\">REGISTER</h1>\n      <div className=\"form-control\">\n        <CustomInputText\n          autoFocus\n          id=\"register-firstName\"\n          label=\"First Name\"\n          name=\"firstName\"\n          type=\"text\"\n          value={values.firstName}\n          handleChange={onChange}\n          error={errors.firstName}\n          required\n          styleClass=\"margin-r-md\"\n        />\n        <CustomInputText\n          id=\"register-lastName\"\n          label=\"Last Name\"\n          name=\"lastName\"\n          type=\"text\"\n          value={values.lastName}\n          handleChange={onChange}\n          error={errors.lastName}\n        />\n      </div>\n      <div className=\"form-control\">\n        <CustomInputText\n          handleChange={onChange}\n          id=\"register-username\"\n          label=\"Username\"\n          type=\"text\"\n          name=\"username\"\n          value={values.username}\n          error={errors.username}\n          required\n        />\n      </div>\n      <div className=\"form-control\">\n        <CustomInputText\n          handleChange={onChange}\n          id=\"register-email\"\n          label=\"Email\"\n          type=\"email\"\n          name=\"email\"\n          value={values.email}\n          error={errors.email}\n          required\n        />\n      </div>\n      <div className=\"form-control\">\n        <CustomInputText\n          handleChange={onChange}\n          id=\"register-password\"\n          label=\"Password\"\n          type=\"password\"\n          name=\"password\"\n          value={values.password}\n          error={errors.password}\n          required\n        />\n      </div>\n      <div className=\"form-control\">\n        <CustomInputText\n          id=\"register-confirmPassword\"\n          label=\"Confirm password\"\n          name=\"confirmPassword\"\n          type=\"password\"\n          value={values.confirmPassword}\n          handleChange={onChange}\n          error={errors.confirmPassword}\n          required\n        />\n      </div>\n      <div className=\"form-control margin-y-lg\">\n        <CustomButton type=\"submit\" styleClass=\"full-width\" color=\"success\">\n          <FontAwesomeIcon icon={faUserPlus} /> Register\n        </CustomButton>\n      </div>\n      <p className=\"paragraph\">\n        Already a member?\n        <Link to=\"/login\">\n          <span className=\"link\"> Sign in.</span>\n        </Link>\n      </p>\n    </form>\n  );\n};\n\nconst REGISTER_USER = gql`\n  mutation(\n    $username: String!\n    $firstName: String!\n    $lastName: String!\n    $email: String!\n    $password: String!\n    $confirmPassword: String!\n  ) {\n    register(\n      registerInput: {\n        username: $username\n        firstName: $firstName\n        lastName: $lastName\n        email: $email\n        password: $password\n        confirmPassword: $confirmPassword\n      }\n    ) {\n      username\n      token\n      createdAt\n      firstName\n      lastName\n      email\n      id\n    }\n  }\n`;\n\nexport default RegisterForm;\n","/mnt/d/projects/Main Projects/social-media/app/client/src/components/Forms/LoginForm.tsx",["151"],"import React from \"react\";\nimport { gql, useMutation } from \"@apollo/client\";\nimport { Link } from \"react-router-dom\";\n\nimport { AuthContext } from \"../../AuthUser.context\";\nimport useForm from \"../../hooks/useForm\";\nimport CustomInputText from \"../CustomInputText\";\nimport CustomButton from \"../CustomButton\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faSignInAlt } from \"@fortawesome/free-solid-svg-icons\";\n\ninterface LoginFormValues {\n  username: string;\n  password: string;\n}\n\nconst LoginForm: React.FC = () => {\n  const context = React.useContext(AuthContext);\n  const [errors, setErrors] = React.useState<{ general: string }>({\n    general: \"\",\n  });\n  const { values, onSubmit, onChange } = useForm<LoginFormValues>(\n    {\n      username: \"\",\n      password: \"\",\n    },\n    handleLogin\n  );\n\n  const [loginUser, { loading }] = useMutation(LOGIN_USER, {\n    update(_, { data: { login: userData } }) {\n      context.login(userData);\n    },\n    onError({ graphQLErrors, networkError }) {\n      if (graphQLErrors) {\n        setErrors(graphQLErrors[0].extensions!.exception.errors);\n      }\n    },\n    variables: values,\n  });\n\n  function handleLogin() {\n    loginUser();\n  }\n\n  return (\n    <form className=\"form\" onSubmit={onSubmit}>\n      <h1 className=\"heading-primary  text-centered\">LOGIN</h1>\n\n      {errors.general !== \"\" && (\n        <h4 className=\"input-text__error\">{errors.general}</h4>\n      )}\n      <div className=\"form-control\">\n        <CustomInputText\n          id=\"login-username\"\n          label=\"Username\"\n          type=\"text\"\n          name=\"username\"\n          value={values.username}\n          handleChange={onChange}\n          required\n          autoFocus\n        />\n      </div>\n      <div className=\"form-control\">\n        <CustomInputText\n          id=\"login-password\"\n          label=\"Password\"\n          type=\"password\"\n          name=\"password\"\n          value={values.password}\n          handleChange={onChange}\n          required\n        />\n      </div>\n      <div className=\"form-control margin-y-lg\">\n        <CustomButton type=\"submit\" styleClass=\"full-width\" color=\"success\">\n          <FontAwesomeIcon icon={faSignInAlt} /> Login\n        </CustomButton>\n      </div>\n      <p className=\"paragraph\">\n        Not a member?\n        <Link to=\"/register\">\n          <span className=\"link\"> Sign up now.</span>\n        </Link>\n      </p>\n    </form>\n  );\n};\n\nconst LOGIN_USER = gql`\n  mutation($username: String!, $password: String!) {\n    login(username: $username, password: $password) {\n      id\n      username\n      firstName\n      lastName\n      token\n      email\n      createdAt\n    }\n  }\n`;\n\nexport default LoginForm;\n","/mnt/d/projects/Main Projects/social-media/app/client/src/hooks/useForm.ts",[],"/mnt/d/projects/Main Projects/social-media/app/client/src/components/AuthRoute.tsx",[],"/mnt/d/projects/Main Projects/social-media/app/client/src/AuthUser.context.tsx",[],"/mnt/d/projects/Main Projects/social-media/app/client/src/components/Forms/PostForm.tsx",["152","153"],"import { gql, useMutation } from \"@apollo/client\";\r\nimport { faEdit, faPencilAlt } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport React from \"react\";\r\n\r\nimport useForm from \"../../hooks/useForm\";\r\nimport { GET_ALL_POSTS } from \"../../utils/graphql\";\r\nimport CustomButton from \"../CustomButton\";\r\nimport CustomInputText from \"../CustomInputText\";\r\n\r\ninterface NewPostFormValues {\r\n  body: string;\r\n}\r\n\r\ninterface Props {\r\n  isEdit?: boolean;\r\n  body?: string;\r\n  postId?: string;\r\n  callback?: () => void;\r\n}\r\n\r\nconst PostForm: React.FC<Props> = ({ isEdit, body, postId, callback }) => {\r\n  let { values, onChange, onSubmit } = useForm<NewPostFormValues>(\r\n    { body: body ?? \"\" },\r\n    handleFormSubmit\r\n  );\r\n\r\n  const [createPost, { loading }] = useMutation(CREATE_POST, {\r\n    update(proxy, { data: { createPost: post } }) {\r\n      let data: any = proxy.readQuery({ query: GET_ALL_POSTS });\r\n\r\n      proxy.writeQuery({\r\n        query: GET_ALL_POSTS,\r\n        data: { getPosts: [post, ...data.getPosts] },\r\n      });\r\n      values.body = \"\";\r\n    },\r\n    onError(err) {\r\n      console.log(err);\r\n    },\r\n    variables: values,\r\n  });\r\n\r\n  const [editPost, { error }] = useMutation(EDIT_POST, {\r\n    update(_, { data: { editPost: post } }) {},\r\n    variables: {\r\n      postId,\r\n      body: values.body,\r\n    },\r\n  });\r\n\r\n  function handleFormSubmit() {\r\n    if (isEdit) {\r\n      editPost();\r\n\r\n      if (callback) {\r\n        callback();\r\n      }\r\n    } else {\r\n      createPost();\r\n    }\r\n  }\r\n\r\n  return (\r\n    <form className=\"form post-form\" onSubmit={onSubmit}>\r\n      <CustomInputText\r\n        id=\"new-post\"\r\n        label=\"Create a new post\"\r\n        name=\"body\"\r\n        type=\"textarea\"\r\n        value={values.body}\r\n        handleChange={onChange}\r\n        required\r\n      />\r\n      {isEdit && <CustomButton onClick={callback}>Cancel</CustomButton>}\r\n      <CustomButton type=\"submit\">\r\n        <FontAwesomeIcon icon={isEdit ? faEdit : faPencilAlt} />{\" \"}\r\n        {isEdit ? \"Edit\" : \"Post!\"}\r\n      </CustomButton>\r\n    </form>\r\n  );\r\n};\r\n\r\nconst CREATE_POST = gql`\r\n  mutation($body: String!) {\r\n    createPost(body: $body) {\r\n      id\r\n      body\r\n      username\r\n      firstName\r\n      lastName\r\n      edited\r\n      createdAt\r\n      likeCount\r\n      likes {\r\n        id\r\n        username\r\n      }\r\n      commentCount\r\n      comments {\r\n        id\r\n        commentId\r\n        body\r\n        username\r\n        firstName\r\n        lastName\r\n        createdAt\r\n        edited\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nconst EDIT_POST = gql`\r\n  mutation($postId: ID!, $body: String!) {\r\n    editPost(postId: $postId, body: $body) {\r\n      id\r\n      body\r\n      username\r\n      firstName\r\n      lastName\r\n      edited\r\n      createdAt\r\n      likeCount\r\n      likes {\r\n        id\r\n        username\r\n      }\r\n      commentCount\r\n      comments {\r\n        id\r\n        commentId\r\n        body\r\n        username\r\n        firstName\r\n        lastName\r\n        createdAt\r\n        edited\r\n      }\r\n    }\r\n  }\r\n`;\r\nexport default PostForm;\r\n","/mnt/d/projects/Main Projects/social-media/app/client/src/utils/graphql.ts",[],"/mnt/d/projects/Main Projects/social-media/app/client/src/components/PostCard.tsx",["154","155","156"],"import React, { useState, useContext } from \"react\";\r\nimport { gql, useMutation } from \"@apollo/client\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nimport { GET_ALL_POSTS } from \"../utils/graphql\";\r\nimport { Post } from \"../utils/types\";\r\nimport { AuthContext } from \"../AuthUser.context\";\r\nimport LikeButton from \"./LikeButton\";\r\n\r\nimport CommentButton from \"./CommentButton\";\r\nimport ConfirmModal from \"./ConfirmModal\";\r\nimport PostForm from \"./Forms/PostForm\";\r\nimport CustomButton from \"./CustomButton\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport {\r\n  faEllipsisH,\r\n  faPenSquare,\r\n  faShareAlt,\r\n  faTrash,\r\n} from \"@fortawesome/free-solid-svg-icons\";\r\nimport CardMenu from \"./CardMenu\";\r\nimport { spawn } from \"child_process\";\r\nimport { getDate } from \"../utils/date\";\r\n\r\ninterface Props {\r\n  post: Post;\r\n}\r\n\r\ninterface Visibility {\r\n  [props: string]: boolean;\r\n}\r\n\r\nconst PostCard: React.FC<Props> = ({\r\n  post: {\r\n    id,\r\n    edited,\r\n    firstName,\r\n    lastName,\r\n    username,\r\n    createdAt,\r\n    body,\r\n    likeCount,\r\n    commentCount,\r\n    likes,\r\n    ...props\r\n  },\r\n}) => {\r\n  const [visibility, setVisibility] = useState<Visibility>({\r\n    commentForm: false,\r\n    editPost: false,\r\n    modal: false,\r\n    comments: false,\r\n    postMenu: false,\r\n  });\r\n\r\n  const { user } = useContext(AuthContext);\r\n\r\n  const [deletePost, { loading }] = useMutation(DELETE_POST, {\r\n    update(proxy, { data: { deletePost: post } }) {\r\n      let data: any = proxy.readQuery({ query: GET_ALL_POSTS });\r\n\r\n      proxy.writeQuery({\r\n        query: GET_ALL_POSTS,\r\n        data: {\r\n          getPosts: data.getPosts.filter(\r\n            (post: { id: string }) => id !== post.id\r\n          ),\r\n        },\r\n      });\r\n    },\r\n    onError(err) {\r\n      console.log(err);\r\n    },\r\n    variables: { postId: id },\r\n  });\r\n\r\n  let signedInUserPost = false;\r\n  if (user) {\r\n    signedInUserPost = user.username === username;\r\n  }\r\n\r\n  const toggleVisibility = (items: string[]) => {\r\n    items.forEach((item) => {\r\n      setVisibility((visibility) => ({\r\n        ...visibility,\r\n        [item]: !visibility[item],\r\n      }));\r\n    });\r\n  };\r\n\r\n  return (\r\n    <div className=\"card__background margin-y-md\">\r\n      <ConfirmModal\r\n        open={visibility.modal}\r\n        onClose={() => toggleVisibility([\"modal\"])}\r\n        onCancel={() => toggleVisibility([\"modal\"])}\r\n        onConfirm={deletePost}\r\n      >\r\n        Do you want to delete this post?\r\n      </ConfirmModal>\r\n      <div className=\"card\">\r\n        {signedInUserPost && (\r\n          <CardMenu\r\n            menuItems={[\r\n              {\r\n                callback: () => toggleVisibility([\"editPost\"]),\r\n                value: (\r\n                  <span>\r\n                    <FontAwesomeIcon icon={faPenSquare} /> Edit\r\n                  </span>\r\n                ),\r\n              },\r\n              {\r\n                callback: () => toggleVisibility([\"modal\"]),\r\n                value: (\r\n                  <span>\r\n                    <FontAwesomeIcon icon={faTrash} /> Delete\r\n                  </span>\r\n                ),\r\n              },\r\n            ]}\r\n          />\r\n        )}\r\n\r\n        <Link to={`/user/${username}`}>\r\n          <h2 className=\"card__title text-2\">\r\n            {firstName} {lastName}\r\n            <span className=\"card__username link text-2\"> @{username}</span>\r\n          </h2>\r\n        </Link>\r\n        <span className=\"card__meta text-1\">{getDate(createdAt)}</span>\r\n        {visibility.editPost ? (\r\n          <PostForm\r\n            isEdit\r\n            body={body}\r\n            postId={id}\r\n            callback={() => setVisibility({ ...visibility, editPost: false })}\r\n          />\r\n        ) : (\r\n          <Link to={`/post/${username}/${id}`}>\r\n            <p className=\"card__description paragraph-3\">\r\n              {body}\r\n              {edited && <em className=\"text-4\">(edited)</em>}\r\n            </p>\r\n          </Link>\r\n        )}\r\n        <div className=\"card__extra\">\r\n          <CustomButton styleClass=\"margin-r-md\">\r\n            <FontAwesomeIcon icon={faShareAlt} />\r\n          </CustomButton>\r\n          <LikeButton id={id} likes={likes} likeCount={likeCount} user={user} />\r\n          <Link to={`/post/${username}/${id}`}>\r\n            <CommentButton count={commentCount} user={user} />\r\n          </Link>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport const DELETE_POST = gql`\r\n  mutation deletePost($postId: ID!) {\r\n    deletePost(postId: $postId) {\r\n      id\r\n      body\r\n      username\r\n      firstName\r\n      lastName\r\n      edited\r\n      createdAt\r\n      likeCount\r\n      likes {\r\n        id\r\n        username\r\n      }\r\n      commentCount\r\n      comments {\r\n        id\r\n        commentId\r\n        body\r\n        username\r\n        firstName\r\n        lastName\r\n        createdAt\r\n        edited\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nexport default PostCard;\r\n","/mnt/d/projects/Main Projects/social-media/app/client/src/components/LikeButton.tsx",["157"],"import React, { useEffect, useState } from \"react\";\r\nimport { gql, useMutation } from \"@apollo/client\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { User } from \"../utils/types\";\r\nimport CustomButton from \"./CustomButton\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faThumbsUp } from \"@fortawesome/free-solid-svg-icons\";\r\n\r\ninterface Props {\r\n  id: string;\r\n\r\n  likes: [{ username: string; id: string }];\r\n  likeCount: number;\r\n  user: User | null;\r\n}\r\n\r\nconst LikeButton: React.FC<Props> = ({ id, likes, likeCount, user }) => {\r\n  const [isLiked, setisLiked] = useState(false);\r\n\r\n  useEffect(() => {\r\n    if (user && likes.find((like) => like.username === user.username)) {\r\n      setisLiked(true);\r\n    } else {\r\n      setisLiked(false);\r\n    }\r\n  });\r\n\r\n  const [likePost] = useMutation(LIKE_POST, {\r\n    update(proxy, { data: { likePost: post } }) {\r\n      likeCount = post.likeCount;\r\n    },\r\n    onError(err) {\r\n      console.log(err);\r\n    },\r\n    variables: { postId: id },\r\n  });\r\n\r\n  return user ? (\r\n    <CustomButton\r\n      styleClass=\"margin-r-md\"\r\n      color={isLiked ? \"primary\" : \"basic\"}\r\n      onClick={() => likePost()}\r\n    >\r\n      <FontAwesomeIcon icon={faThumbsUp} /> {likeCount}\r\n    </CustomButton>\r\n  ) : (\r\n    <Link to=\"/login\">\r\n      <CustomButton styleClass=\"margin-r-md\" noBackground>\r\n        <FontAwesomeIcon icon={faThumbsUp} /> {likeCount}\r\n      </CustomButton>\r\n    </Link>\r\n  );\r\n};\r\n\r\nexport const LIKE_POST = gql`\r\n  mutation likePost($postId: ID!) {\r\n    likePost(postId: $postId) {\r\n      id\r\n      body\r\n      username\r\n      firstName\r\n      lastName\r\n      edited\r\n      createdAt\r\n      likeCount\r\n      likes {\r\n        id\r\n        username\r\n      }\r\n      commentCount\r\n      comments {\r\n        id\r\n        commentId\r\n        body\r\n        username\r\n        firstName\r\n        lastName\r\n        createdAt\r\n        edited\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nexport default LikeButton;\r\n","/mnt/d/projects/Main Projects/social-media/app/client/src/pages/SingleUser.tsx",[],"/mnt/d/projects/Main Projects/social-media/app/client/src/pages/SinglePost.tsx",["158"],"import React, { useContext, Fragment } from \"react\";\r\nimport { gql, useQuery } from \"@apollo/client\";\r\n\r\nimport PostCard from \"../components/PostCard\";\r\nimport { AuthContext } from \"../AuthUser.context\";\r\nimport Comment from \"../components/Comment\";\r\nimport CommentForm from \"../components/Forms/CommentForm\";\r\nimport Layout from \"../components/Layout\";\r\n\r\ninterface Props {\r\n  match: { params: { postId: string } };\r\n}\r\n\r\ntype Comment = {\r\n  commentId: any;\r\n  id: string;\r\n  body: string;\r\n  username: string;\r\n  firstName: string;\r\n  lastName: string;\r\n  createdAt: string;\r\n  edited: boolean;\r\n};\r\n\r\nconst SinglePost: React.FC<Props> = (props) => {\r\n  const { user } = useContext(AuthContext);\r\n\r\n  const { postId } = props.match.params;\r\n\r\n  const { data, loading } = useQuery(GET_POST, { variables: { postId } });\r\n\r\n  return (\r\n    <Layout hasSidebar>\r\n      {loading ? (\r\n        <h1>Loading...</h1>\r\n      ) : data ? (\r\n        <Fragment>\r\n          <PostCard post={data.getPost} />\r\n          {user && <CommentForm postId={postId} />}\r\n          <div className=\"scrollable-container\">\r\n            {data.getPost.comments.map((comment: Comment) => (\r\n              <Comment\r\n                key={comment.commentId}\r\n                postId={postId}\r\n                comment={comment}\r\n              />\r\n            ))}\r\n          </div>\r\n        </Fragment>\r\n      ) : (\r\n        <h1>An error has occured</h1>\r\n      )}\r\n    </Layout>\r\n  );\r\n};\r\n\r\nconst GET_POST = gql`\r\n  query getPost($postId: ID!) {\r\n    getPost(postId: $postId) {\r\n      id\r\n      body\r\n      username\r\n      firstName\r\n      lastName\r\n      edited\r\n      createdAt\r\n      likeCount\r\n      likes {\r\n        id\r\n        username\r\n      }\r\n      commentCount\r\n      comments {\r\n        id\r\n        commentId\r\n        body\r\n        username\r\n        firstName\r\n        lastName\r\n        createdAt\r\n        edited\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nexport default SinglePost;\r\n","/mnt/d/projects/Main Projects/social-media/app/client/src/components/Forms/CommentForm.tsx",["159","160"],"import React from \"react\";\r\nimport { gql, useMutation } from \"@apollo/client\";\r\n\r\nimport useForm from \"../../hooks/useForm\";\r\nimport CustomInputText from \"../CustomInputText\";\r\nimport CustomButton from \"../CustomButton\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faComment, faCommentDots } from \"@fortawesome/free-solid-svg-icons\";\r\n\r\ninterface Props {\r\n  postId: string;\r\n  isEdit?: boolean;\r\n  body?: string;\r\n  commentId?: string;\r\n  callback?: () => void;\r\n}\r\n\r\nconst CommentForm: React.FC<Props> = ({\r\n  postId,\r\n  body,\r\n  callback,\r\n  commentId,\r\n  isEdit,\r\n}) => {\r\n  const { values, onSubmit, onChange } = useForm<{ comment: string }>(\r\n    {\r\n      comment: body ?? \"\",\r\n    },\r\n    handleFormSubmit\r\n  );\r\n\r\n  const [createComment, { loading: createLoading }] = useMutation(\r\n    CREATE_COMMENT,\r\n    {\r\n      update(_, { data: { createComment: post } }) {\r\n        values.comment = \"\";\r\n      },\r\n      variables: {\r\n        body: values.comment,\r\n        postId,\r\n      },\r\n    }\r\n  );\r\n\r\n  const [editComment, { loading: editLoading }] = useMutation(EDIT_COMMENT, {\r\n    update(_, { data: { editComment: post } }) {},\r\n    variables: {\r\n      postId,\r\n      commentId,\r\n      body: values.comment,\r\n    },\r\n  });\r\n\r\n  function handleFormSubmit() {\r\n    if (isEdit) {\r\n      editComment();\r\n      if (callback) {\r\n        callback();\r\n      }\r\n    } else {\r\n      createComment();\r\n    }\r\n  }\r\n\r\n  return (\r\n    <form className=\"form form-comment\" onSubmit={onSubmit}>\r\n      <div className=\"form-control\">\r\n        <CustomInputText\r\n          id=\"comment\"\r\n          label=\"Comment\"\r\n          name=\"comment\"\r\n          type=\"text\"\r\n          value={values.comment}\r\n          handleChange={onChange}\r\n          required\r\n        />\r\n      </div>\r\n      <div className=\"form-control\">\r\n        <CustomButton type=\"submit\">\r\n          <FontAwesomeIcon icon={isEdit ? faCommentDots : faComment} />{\" \"}\r\n          {isEdit ? \"Edit Comment\" : \"Comment\"}\r\n        </CustomButton>\r\n      </div>\r\n    </form>\r\n  );\r\n};\r\n\r\nconst CREATE_COMMENT = gql`\r\n  mutation createComment($postId: ID!, $body: String!) {\r\n    createComment(postId: $postId, body: $body) {\r\n      id\r\n      body\r\n      username\r\n      firstName\r\n      lastName\r\n      edited\r\n      createdAt\r\n      likeCount\r\n      likes {\r\n        id\r\n        username\r\n      }\r\n      commentCount\r\n      comments {\r\n        id\r\n        commentId\r\n        body\r\n        username\r\n        firstName\r\n        lastName\r\n        createdAt\r\n        edited\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nconst EDIT_COMMENT = gql`\r\n  mutation($postId: ID!, $commentId: ID!, $body: String!) {\r\n    editComment(postId: $postId, commentId: $commentId, body: $body) {\r\n      comments {\r\n        id\r\n        commentId\r\n        body\r\n        username\r\n        firstName\r\n        lastName\r\n        createdAt\r\n        edited\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nexport default CommentForm;\r\n","/mnt/d/projects/Main Projects/social-media/app/client/src/components/Comment.tsx",["161","162"],"import React, { useState, useContext } from \"react\";\r\nimport { gql, useMutation } from \"@apollo/client\";\r\nimport {\r\n  faEllipsisH,\r\n  faPenSquare,\r\n  faTrash,\r\n} from \"@fortawesome/free-solid-svg-icons\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nimport { AuthContext } from \"../AuthUser.context\";\r\nimport { GET_ALL_POSTS } from \"../utils/graphql\";\r\nimport ConfirmModal from \"./ConfirmModal\";\r\nimport CommentForm from \"./Forms/CommentForm\";\r\nimport CardMenu from \"./CardMenu\";\r\nimport { getDate } from \"../utils/date\";\r\n\r\ninterface Props {\r\n  comment: {\r\n    id: string;\r\n    commentId: string;\r\n    body: string;\r\n    username: string;\r\n    firstName: string;\r\n    lastName: string;\r\n    createdAt: string;\r\n    edited: boolean;\r\n  };\r\n  postId: string;\r\n}\r\n\r\nconst Comment: React.FC<Props> = ({\r\n  comment: {\r\n    commentId,\r\n    body,\r\n    username,\r\n    firstName,\r\n    lastName,\r\n    createdAt,\r\n    edited,\r\n  },\r\n  postId,\r\n}) => {\r\n  const [showEditComment, setShowEditComment] = useState(false);\r\n  const [modalOpen, setModalOpen] = useState(false);\r\n  const { user } = useContext(AuthContext);\r\n\r\n  const [deleteComment, { loading }] = useMutation(DELETE_COMMENT, {\r\n    update(proxy, { data: { deleteComment: post } }) {\r\n      let queryData: any = proxy.readQuery({ query: GET_ALL_POSTS });\r\n\r\n      proxy.writeQuery({\r\n        query: GET_ALL_POSTS,\r\n        data: queryData,\r\n      });\r\n    },\r\n    onError(err) {\r\n      console.log(err);\r\n    },\r\n    variables: {\r\n      postId,\r\n      commentId,\r\n    },\r\n  });\r\n\r\n  let signedInUserComment = false;\r\n  if (user) {\r\n    signedInUserComment = user.username === username;\r\n  }\r\n\r\n  return (\r\n    <div className=\" card__background\">\r\n      <ConfirmModal\r\n        open={modalOpen}\r\n        onClose={() => setModalOpen(false)}\r\n        onCancel={() => setModalOpen(false)}\r\n        onConfirm={deleteComment}\r\n      >\r\n        Do you want to delete this comment?\r\n      </ConfirmModal>\r\n      <div className=\" card\">\r\n        {user && signedInUserComment && (\r\n          <CardMenu\r\n            menuItems={[\r\n              {\r\n                callback: () => setShowEditComment((show) => !show),\r\n                value: (\r\n                  <span>\r\n                    <FontAwesomeIcon icon={faPenSquare} /> Edit\r\n                  </span>\r\n                ),\r\n              },\r\n              {\r\n                callback: () => () => setModalOpen(true),\r\n                value: (\r\n                  <span>\r\n                    <FontAwesomeIcon icon={faTrash} /> Delete\r\n                  </span>\r\n                ),\r\n              },\r\n            ]}\r\n          />\r\n        )}\r\n        <Link to={`/user/${username}`}>\r\n          <h2 className=\"card__title\">\r\n            {firstName} {lastName}\r\n            <span className=\"card__username link\"> @{username}</span>\r\n          </h2>\r\n        </Link>\r\n        <span className=\"card__meta\">{getDate(createdAt)}</span>\r\n        {showEditComment ? (\r\n          <CommentForm\r\n            isEdit\r\n            body={body}\r\n            postId={postId}\r\n            commentId={commentId}\r\n            callback={() => setShowEditComment((show) => !show)}\r\n          />\r\n        ) : (\r\n          <p className=\"card__description paragraph\">\r\n            {edited && <em>(edited)</em>}\r\n            {body}\r\n          </p>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst DELETE_COMMENT = gql`\r\n  mutation deleteComment($postId: ID!, $commentId: ID!) {\r\n    deleteComment(postId: $postId, commentId: $commentId) {\r\n      id\r\n      commentCount\r\n      comments {\r\n        id\r\n        commentId\r\n        body\r\n        username\r\n        firstName\r\n        lastName\r\n        createdAt\r\n        edited\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nexport default Comment;\r\n","/mnt/d/projects/Main Projects/social-media/app/client/src/components/CommentButton.tsx",[],"/mnt/d/projects/Main Projects/social-media/app/client/src/components/ConfirmModal.tsx",[],"/mnt/d/projects/Main Projects/social-media/app/client/src/Routes.tsx",[],"/mnt/d/projects/Main Projects/social-media/app/client/src/components/Logo.tsx",[],"/mnt/d/projects/Main Projects/social-media/app/client/src/components/Links.tsx",[],"/mnt/d/projects/Main Projects/social-media/app/client/src/components/CustomButton.tsx",[],"/mnt/d/projects/Main Projects/social-media/app/client/src/components/CustomInputText.tsx",[],"/mnt/d/projects/Main Projects/social-media/app/client/src/pages/NewPost.tsx",[],"/mnt/d/projects/Main Projects/social-media/app/client/src/components/Layout.tsx",["163"],"import React, { useContext } from \"react\";\r\n\r\ninterface Props {\r\n  hasSidebar?: boolean;\r\n}\r\n\r\nconst Layout: React.FC<Props> = ({ children, hasSidebar }) => {\r\n  return (\r\n    <div className=\"page\">\r\n      <main className=\"page-container\">{children}</main>\r\n      {hasSidebar && <aside className=\"page-sidebar\"></aside>}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Layout;\r\n","/mnt/d/projects/Main Projects/social-media/app/client/src/components/CardMenu.tsx",[],"/mnt/d/projects/Main Projects/social-media/app/client/src/hooks/useOutsideAlerter.ts",["164"],"import React, { useEffect } from \"react\";\r\n\r\nexport const useOutsideAlerter = (\r\n  ref: React.MutableRefObject<any>,\r\n  callback: () => void\r\n) => {\r\n  useEffect(() => {\r\n    const handleClickOutside = (event: any) => {\r\n      if (ref.current && !ref.current.contains(event.target)) {\r\n        callback();\r\n      }\r\n    };\r\n    document.addEventListener(\"mousedown\", handleClickOutside);\r\n\r\n    return () => {\r\n      document.removeEventListener(\"mousedown\", handleClickOutside);\r\n    };\r\n  }, [ref]);\r\n};\r\n",["165","166"],"/mnt/d/projects/Main Projects/social-media/app/client/src/utils/date.ts",[],{"ruleId":"167","replacedBy":"168"},{"ruleId":"169","replacedBy":"170"},{"ruleId":"171","severity":1,"message":"172","line":1,"column":17,"nodeType":"173","messageId":"174","endLine":1,"endColumn":27},{"ruleId":"171","severity":1,"message":"175","line":43,"column":26,"nodeType":"173","messageId":"174","endLine":43,"endColumn":33},{"ruleId":"171","severity":1,"message":"175","line":30,"column":23,"nodeType":"173","messageId":"174","endLine":30,"endColumn":30},{"ruleId":"171","severity":1,"message":"175","line":28,"column":24,"nodeType":"173","messageId":"174","endLine":28,"endColumn":31},{"ruleId":"171","severity":1,"message":"176","line":44,"column":22,"nodeType":"173","messageId":"174","endLine":44,"endColumn":27},{"ruleId":"171","severity":1,"message":"177","line":16,"column":3,"nodeType":"173","messageId":"174","endLine":16,"endColumn":14},{"ruleId":"171","severity":1,"message":"178","line":22,"column":10,"nodeType":"173","messageId":"174","endLine":22,"endColumn":15},{"ruleId":"171","severity":1,"message":"175","line":58,"column":24,"nodeType":"173","messageId":"174","endLine":58,"endColumn":31},{"ruleId":"179","severity":1,"message":"180","line":20,"column":3,"nodeType":"173","endLine":20,"endColumn":12,"suggestions":"181"},{"ruleId":"182","severity":1,"message":"183","line":14,"column":6,"nodeType":"173","messageId":"184","endLine":14,"endColumn":13},{"ruleId":"171","severity":1,"message":"185","line":32,"column":36,"nodeType":"173","messageId":"174","endLine":32,"endColumn":49},{"ruleId":"171","severity":1,"message":"186","line":45,"column":34,"nodeType":"173","messageId":"174","endLine":45,"endColumn":45},{"ruleId":"171","severity":1,"message":"177","line":4,"column":3,"nodeType":"173","messageId":"174","endLine":4,"endColumn":14},{"ruleId":"171","severity":1,"message":"175","line":48,"column":27,"nodeType":"173","messageId":"174","endLine":48,"endColumn":34},{"ruleId":"171","severity":1,"message":"172","line":1,"column":17,"nodeType":"173","messageId":"174","endLine":1,"endColumn":27},{"ruleId":"179","severity":1,"message":"187","line":18,"column":6,"nodeType":"188","endLine":18,"endColumn":11,"suggestions":"189"},{"ruleId":"167","replacedBy":"190"},{"ruleId":"169","replacedBy":"191"},"no-native-reassign",["192"],"no-negated-in-lhs",["193"],"@typescript-eslint/no-unused-vars","'useContext' is defined but never used.","Identifier","unusedVar","'loading' is assigned a value but never used.","'error' is assigned a value but never used.","'faEllipsisH' is defined but never used.","'spawn' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect contains a call to 'setisLiked'. Without a list of dependencies, this can lead to an infinite chain of updates. To fix this, pass [user, likes] as a second argument to the useEffect Hook.",["194"],"@typescript-eslint/no-redeclare","'Comment' is already defined.","redeclared","'createLoading' is assigned a value but never used.","'editLoading' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'callback'. Either include it or remove the dependency array. If 'callback' changes too often, find the parent component that defines it and wrap that definition in useCallback.","ArrayExpression",["195"],["192"],["193"],"no-global-assign","no-unsafe-negation",{"desc":"196","fix":"197"},{"desc":"198","fix":"199"},"Add dependencies array: [user, likes]",{"range":"200","text":"201"},"Update the dependencies array to be: [callback, ref]",{"range":"202","text":"203"},[793,793],", [user, likes]",[494,499],"[callback, ref]"]