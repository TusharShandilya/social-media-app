[{"/mnt/d/projects/Main Projects/social-media/app/client/src/index.tsx":"1","/mnt/d/projects/Main Projects/social-media/app/client/src/App.tsx":"2","/mnt/d/projects/Main Projects/social-media/app/client/src/utils/ApolloClient.ts":"3","/mnt/d/projects/Main Projects/social-media/app/client/src/components/Navbar.tsx":"4","/mnt/d/projects/Main Projects/social-media/app/client/src/utils/cookies.ts":"5","/mnt/d/projects/Main Projects/social-media/app/client/src/pages/Home.tsx":"6","/mnt/d/projects/Main Projects/social-media/app/client/src/pages/Register.tsx":"7","/mnt/d/projects/Main Projects/social-media/app/client/src/pages/Login.tsx":"8","/mnt/d/projects/Main Projects/social-media/app/client/src/components/Forms/RegisterForm.tsx":"9","/mnt/d/projects/Main Projects/social-media/app/client/src/components/Forms/LoginForm.tsx":"10","/mnt/d/projects/Main Projects/social-media/app/client/src/components/AuthRoute.tsx":"11","/mnt/d/projects/Main Projects/social-media/app/client/src/AuthUser.context.tsx":"12","/mnt/d/projects/Main Projects/social-media/app/client/src/components/Forms/PostForm.tsx":"13","/mnt/d/projects/Main Projects/social-media/app/client/src/utils/graphql.ts":"14","/mnt/d/projects/Main Projects/social-media/app/client/src/components/PostCard.tsx":"15","/mnt/d/projects/Main Projects/social-media/app/client/src/components/LikeButton.tsx":"16","/mnt/d/projects/Main Projects/social-media/app/client/src/pages/SingleUser.tsx":"17","/mnt/d/projects/Main Projects/social-media/app/client/src/pages/SinglePost.tsx":"18","/mnt/d/projects/Main Projects/social-media/app/client/src/components/Forms/CommentForm.tsx":"19","/mnt/d/projects/Main Projects/social-media/app/client/src/components/Comment.tsx":"20","/mnt/d/projects/Main Projects/social-media/app/client/src/Routes.tsx":"21","/mnt/d/projects/Main Projects/social-media/app/client/src/components/Logo.tsx":"22","/mnt/d/projects/Main Projects/social-media/app/client/src/components/Links.tsx":"23","/mnt/d/projects/Main Projects/social-media/app/client/src/components/CustomButton.tsx":"24","/mnt/d/projects/Main Projects/social-media/app/client/src/components/CustomInputText.tsx":"25","/mnt/d/projects/Main Projects/social-media/app/client/src/pages/NewPost.tsx":"26","/mnt/d/projects/Main Projects/social-media/app/client/src/components/Layout.tsx":"27","/mnt/d/projects/Main Projects/social-media/app/client/src/components/CardMenu.tsx":"28","/mnt/d/projects/Main Projects/social-media/app/client/src/utils/date.ts":"29","/mnt/d/projects/Main Projects/social-media/app/client/src/components/Toast.tsx":"30","/mnt/d/projects/Main Projects/social-media/app/client/src/hooks/useToast.tsx":"31","/mnt/d/projects/Main Projects/social-media/app/client/src/hooks/useForm.tsx":"32","/mnt/d/projects/Main Projects/social-media/app/client/src/hooks/useModal.tsx":"33","/mnt/d/projects/Main Projects/social-media/app/client/src/hooks/useOutsideAlerter.tsx":"34","/mnt/d/projects/Main Projects/social-media/app/client/src/components/CommentButton.tsx":"35","/mnt/d/projects/Main Projects/social-media/app/client/src/components/Modal.tsx":"36"},{"size":219,"mtime":1609481171999,"results":"37","hashOfConfig":"38"},{"size":570,"mtime":1610356199398,"results":"39","hashOfConfig":"38"},{"size":601,"mtime":1609770634153,"results":"40","hashOfConfig":"38"},{"size":354,"mtime":1610103442676,"results":"41","hashOfConfig":"38"},{"size":723,"mtime":1609481172096,"results":"42","hashOfConfig":"38"},{"size":761,"mtime":1610644720605,"results":"43","hashOfConfig":"38"},{"size":264,"mtime":1610356529984,"results":"44","hashOfConfig":"38"},{"size":247,"mtime":1610356511753,"results":"45","hashOfConfig":"38"},{"size":4510,"mtime":1610350750973,"results":"46","hashOfConfig":"38"},{"size":2705,"mtime":1610437392347,"results":"47","hashOfConfig":"38"},{"size":829,"mtime":1610298179153,"results":"48","hashOfConfig":"38"},{"size":1623,"mtime":1609581014216,"results":"49","hashOfConfig":"38"},{"size":4553,"mtime":1610642590228,"results":"50","hashOfConfig":"38"},{"size":468,"mtime":1609583256065,"results":"51","hashOfConfig":"38"},{"size":5077,"mtime":1610645036639,"results":"52","hashOfConfig":"38"},{"size":1712,"mtime":1610644347378,"results":"53","hashOfConfig":"38"},{"size":1797,"mtime":1610368589811,"results":"54","hashOfConfig":"38"},{"size":2128,"mtime":1610644826319,"results":"55","hashOfConfig":"38"},{"size":3953,"mtime":1610641038139,"results":"56","hashOfConfig":"38"},{"size":3574,"mtime":1610643999702,"results":"57","hashOfConfig":"38"},{"size":859,"mtime":1610356292357,"results":"58","hashOfConfig":"38"},{"size":361,"mtime":1610116983521,"results":"59","hashOfConfig":"38"},{"size":1803,"mtime":1610644412573,"results":"60","hashOfConfig":"38"},{"size":856,"mtime":1610280452640,"results":"61","hashOfConfig":"38"},{"size":1580,"mtime":1610440478088,"results":"62","hashOfConfig":"38"},{"size":273,"mtime":1610356364506,"results":"63","hashOfConfig":"38"},{"size":354,"mtime":1610645057042,"results":"64","hashOfConfig":"38"},{"size":1238,"mtime":1610639533417,"results":"65","hashOfConfig":"38"},{"size":235,"mtime":1610366331154,"results":"66","hashOfConfig":"38"},{"size":1116,"mtime":1610449604646,"results":"67","hashOfConfig":"38"},{"size":823,"mtime":1610644842677,"results":"68","hashOfConfig":"38"},{"size":581,"mtime":1610639796479,"results":"69","hashOfConfig":"38"},{"size":269,"mtime":1610640236477,"results":"70","hashOfConfig":"38"},{"size":500,"mtime":1610644859025,"results":"71","hashOfConfig":"38"},{"size":732,"mtime":1610640621100,"results":"72","hashOfConfig":"38"},{"size":1617,"mtime":1610640632911,"results":"73","hashOfConfig":"38"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},"5ctubq",{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"93","usedDeprecatedRules":"76"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"96","usedDeprecatedRules":"76"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"103","usedDeprecatedRules":"76"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"108","messages":"109","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"110","messages":"111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"114","messages":"115","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"116","usedDeprecatedRules":"76"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"119","usedDeprecatedRules":"76"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"126","messages":"127","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"132","messages":"133","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"134","messages":"135","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"138","messages":"139","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"140","messages":"141","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"142","messages":"143","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"144","messages":"145","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"146","messages":"147","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"148","messages":"149","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"150","messages":"151","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},"/mnt/d/projects/Main Projects/social-media/app/client/src/index.tsx",[],["152","153"],"/mnt/d/projects/Main Projects/social-media/app/client/src/App.tsx",[],"/mnt/d/projects/Main Projects/social-media/app/client/src/utils/ApolloClient.ts",[],"/mnt/d/projects/Main Projects/social-media/app/client/src/components/Navbar.tsx",[],"/mnt/d/projects/Main Projects/social-media/app/client/src/utils/cookies.ts",[],"/mnt/d/projects/Main Projects/social-media/app/client/src/pages/Home.tsx",[],"/mnt/d/projects/Main Projects/social-media/app/client/src/pages/Register.tsx",[],"/mnt/d/projects/Main Projects/social-media/app/client/src/pages/Login.tsx",[],"/mnt/d/projects/Main Projects/social-media/app/client/src/components/Forms/RegisterForm.tsx",["154"],"import React from \"react\";\nimport { gql, useMutation } from \"@apollo/client\";\n\nimport { AuthContext } from \"../../AuthUser.context\";\nimport useForm from \"../../hooks/useForm\";\nimport CustomInputText from \"../CustomInputText\";\nimport CustomButton from \"../CustomButton\";\nimport { Link } from \"react-router-dom\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faUserPlus } from \"@fortawesome/free-solid-svg-icons\";\n\ninterface RegisterFormValues {\n  firstName: string;\n  lastName: string;\n  username: string;\n  email: string;\n  password: string;\n  confirmPassword: string;\n}\n\nconst RegisterForm: React.FC = () => {\n  const context = React.useContext(AuthContext);\n  const [errors, setErrors] = React.useState<RegisterFormValues>({\n    firstName: \"\",\n    lastName: \"\",\n    username: \"\",\n    email: \"\",\n    password: \"\",\n    confirmPassword: \"\",\n  });\n  const { values, onSubmit, onChange } = useForm<RegisterFormValues>(\n    {\n      firstName: \"\",\n      lastName: \"\",\n      username: \"\",\n      email: \"\",\n      password: \"\",\n      confirmPassword: \"\",\n    },\n    handleRegistration\n  );\n\n  const [registerUser, { loading }] = useMutation(REGISTER_USER, {\n    update(_, { data: { register: userData } }) {\n      context.login(userData);\n    },\n    variables: values,\n    onError({ graphQLErrors, networkError }) {\n      if (graphQLErrors) {\n        setErrors(graphQLErrors[0].extensions!.exception.errors);\n      }\n    },\n  });\n\n  function handleRegistration() {\n    registerUser();\n  }\n\n  return (\n    <form className=\"form\" onSubmit={onSubmit}>\n      <h1 className=\"heading-primary  text-centered\">REGISTER</h1>\n      <div className=\"form-control\">\n        <CustomInputText\n          autoFocus\n          id=\"register-firstName\"\n          label=\"First Name\"\n          name=\"firstName\"\n          type=\"text\"\n          value={values.firstName}\n          handleChange={onChange}\n          error={errors.firstName}\n          required\n          styleClass=\"margin-r-md\"\n        />\n        <CustomInputText\n          id=\"register-lastName\"\n          label=\"Last Name\"\n          name=\"lastName\"\n          type=\"text\"\n          value={values.lastName}\n          handleChange={onChange}\n          error={errors.lastName}\n        />\n      </div>\n      <div className=\"form-control\">\n        <CustomInputText\n          handleChange={onChange}\n          id=\"register-username\"\n          label=\"Username\"\n          type=\"text\"\n          name=\"username\"\n          value={values.username}\n          error={errors.username}\n          required\n        />\n      </div>\n      <div className=\"form-control\">\n        <CustomInputText\n          handleChange={onChange}\n          id=\"register-email\"\n          label=\"Email\"\n          type=\"email\"\n          name=\"email\"\n          value={values.email}\n          error={errors.email}\n          required\n        />\n      </div>\n      <div className=\"form-control\">\n        <CustomInputText\n          handleChange={onChange}\n          id=\"register-password\"\n          label=\"Password\"\n          type=\"password\"\n          name=\"password\"\n          value={values.password}\n          error={errors.password}\n          required\n        />\n      </div>\n      <div className=\"form-control\">\n        <CustomInputText\n          id=\"register-confirmPassword\"\n          label=\"Confirm password\"\n          name=\"confirmPassword\"\n          type=\"password\"\n          value={values.confirmPassword}\n          handleChange={onChange}\n          error={errors.confirmPassword}\n          required\n        />\n      </div>\n      <div className=\"form-control margin-y-lg\">\n        <CustomButton type=\"submit\" styleClass=\"full-width\" color=\"success\">\n          <FontAwesomeIcon icon={faUserPlus} /> Register\n        </CustomButton>\n      </div>\n      <p className=\"paragraph\">\n        Already a member?\n        <Link to=\"/login\">\n          <span className=\"link\"> Sign in.</span>\n        </Link>\n      </p>\n    </form>\n  );\n};\n\nconst REGISTER_USER = gql`\n  mutation(\n    $username: String!\n    $firstName: String!\n    $lastName: String!\n    $email: String!\n    $password: String!\n    $confirmPassword: String!\n  ) {\n    register(\n      registerInput: {\n        username: $username\n        firstName: $firstName\n        lastName: $lastName\n        email: $email\n        password: $password\n        confirmPassword: $confirmPassword\n      }\n    ) {\n      username\n      token\n      createdAt\n      firstName\n      lastName\n      email\n      id\n    }\n  }\n`;\n\nexport default RegisterForm;\n","/mnt/d/projects/Main Projects/social-media/app/client/src/components/Forms/LoginForm.tsx",["155"],"import React from \"react\";\nimport { gql, useMutation } from \"@apollo/client\";\nimport { Link } from \"react-router-dom\";\n\nimport { AuthContext } from \"../../AuthUser.context\";\nimport useForm from \"../../hooks/useForm\";\nimport CustomInputText from \"../CustomInputText\";\nimport CustomButton from \"../CustomButton\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faSignInAlt } from \"@fortawesome/free-solid-svg-icons\";\n\ninterface LoginFormValues {\n  username: string;\n  password: string;\n}\n\nconst LoginForm: React.FC = () => {\n  const context = React.useContext(AuthContext);\n  const [errors, setErrors] = React.useState<{ general: string }>({\n    general: \"\",\n  });\n  const { values, onSubmit, onChange } = useForm<LoginFormValues>(\n    {\n      username: \"\",\n      password: \"\",\n    },\n    handleLogin\n  );\n\n  const [loginUser, { loading }] = useMutation(LOGIN_USER, {\n    update(_, { data: { login: userData } }) {\n      context.login(userData);\n    },\n    onError({ graphQLErrors, networkError }) {\n      if (graphQLErrors) {\n        setErrors(graphQLErrors[0].extensions!.exception.errors);\n      }\n    },\n    variables: values,\n  });\n\n  function handleLogin() {\n    loginUser();\n  }\n\n  return (\n    <form className=\"form login-form \" onSubmit={onSubmit}>\n      <h1 className=\"heading-primary  text-centered\">LOGIN</h1>\n\n      {errors.general !== \"\" && (\n        <h4 className=\"input-text__error\">{errors.general}</h4>\n      )}\n      <div className=\"form-control\">\n        <CustomInputText\n          id=\"login-username\"\n          label=\"Username\"\n          type=\"text\"\n          name=\"username\"\n          value={values.username}\n          handleChange={onChange}\n          required\n          autoFocus\n        />\n      </div>\n      <div className=\"form-control\">\n        <CustomInputText\n          id=\"login-password\"\n          label=\"Password\"\n          type=\"password\"\n          name=\"password\"\n          value={values.password}\n          handleChange={onChange}\n          required\n        />\n      </div>\n      <div className=\"form-control margin-y-lg\">\n        <CustomButton type=\"submit\" styleClass=\"full-width\" color=\"success\">\n          <FontAwesomeIcon icon={faSignInAlt} /> Login\n        </CustomButton>\n      </div>\n      <p className=\"paragraph\">\n        Not a member?\n        <Link to=\"/register\">\n          <span className=\"link\"> Sign up now.</span>\n        </Link>\n      </p>\n    </form>\n  );\n};\n\nconst LOGIN_USER = gql`\n  mutation($username: String!, $password: String!) {\n    login(username: $username, password: $password) {\n      id\n      username\n      firstName\n      lastName\n      token\n      email\n      createdAt\n    }\n  }\n`;\n\nexport default LoginForm;\n","/mnt/d/projects/Main Projects/social-media/app/client/src/components/AuthRoute.tsx",[],"/mnt/d/projects/Main Projects/social-media/app/client/src/AuthUser.context.tsx",[],"/mnt/d/projects/Main Projects/social-media/app/client/src/components/Forms/PostForm.tsx",["156","157","158"],"import React, { useState, useEffect } from \"react\";\r\nimport { gql, useMutation } from \"@apollo/client\";\r\nimport { faBan, faEdit, faPencilAlt } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\n\r\nimport useForm from \"../../hooks/useForm\";\r\nimport { GET_ALL_POSTS } from \"../../utils/graphql\";\r\nimport CustomButton from \"../CustomButton\";\r\nimport CustomInputText from \"../CustomInputText\";\r\nimport { useHistory } from \"react-router\";\r\n\r\ninterface NewPostFormValues {\r\n  body: string;\r\n}\r\n\r\ninterface Props {\r\n  isEdit?: boolean;\r\n  body?: string;\r\n  postId?: string;\r\n  callback?: () => void;\r\n}\r\n\r\nconst PostForm: React.FC<Props> = ({ isEdit, body, postId, callback }) => {\r\n  let history = useHistory();\r\n  const [error, setError] = useState(\"\");\r\n  let { values, onChange, onSubmit } = useForm<NewPostFormValues>(\r\n    { body: body ?? \"\" },\r\n    handleFormSubmit\r\n  );\r\n  const bodyLengthLimit = 250;\r\n\r\n  useEffect(() => {\r\n    if (values.body.length > bodyLengthLimit) {\r\n      if (error !== `Post needs to be less than ${bodyLengthLimit} in length`) {\r\n        setError(`Post needs to be less than ${bodyLengthLimit} in length`);\r\n      }\r\n    } else {\r\n      if (error !== \"\") {\r\n        setError(\"\");\r\n      }\r\n    }\r\n  }, [values.body]);\r\n\r\n  const [createPost, { loading }] = useMutation(CREATE_POST, {\r\n    update(proxy, { data: { createPost: post } }) {\r\n      let data: any = proxy.readQuery({ query: GET_ALL_POSTS });\r\n\r\n      proxy.writeQuery({\r\n        query: GET_ALL_POSTS,\r\n        data: { getPosts: [post, ...data.getPosts] },\r\n      });\r\n      values.body = \"\";\r\n    },\r\n    onError(err) {\r\n      console.log(err);\r\n    },\r\n    variables: values,\r\n  });\r\n\r\n  const [editPost, { error: editError }] = useMutation(EDIT_POST, {\r\n    update(_, { data: { editPost: post } }) {},\r\n    variables: {\r\n      postId,\r\n      body: values.body,\r\n    },\r\n  });\r\n\r\n  //  Regular function to allow hoisting to useForm hook\r\n  function handleFormSubmit() {\r\n    if (isEdit) {\r\n      editPost();\r\n      if (callback) {\r\n        callback();\r\n      }\r\n    } else {\r\n      createPost();\r\n      history.push(\"/\");\r\n    }\r\n  }\r\n\r\n  const handleSubmit = (e: React.FormEvent<HTMLFormElement>) => {\r\n    if (values.body.length <= bodyLengthLimit) {\r\n      onSubmit(e);\r\n    } else {\r\n      alert(\"Post length limit exceeded\");\r\n    }\r\n  };\r\n\r\n  return (\r\n    <form\r\n      className=\"form post-form full-width margin-y-md\"\r\n      onSubmit={handleSubmit}\r\n    >\r\n      <h3 className=\"heading-primary text-5\">\r\n        {isEdit ? \"Edit your post\" : \"Post something!\"}\r\n      </h3>\r\n\r\n      <div className=\"form-control\">\r\n        <CustomInputText\r\n          id=\"new-post\"\r\n          label={`${isEdit ? \"Edit post...\" : \"What's on your mind?\"} (${\r\n            values.body.length\r\n          }/${bodyLengthLimit})`}\r\n          name=\"body\"\r\n          type=\"textarea\"\r\n          value={values.body}\r\n          handleChange={onChange}\r\n          required\r\n          error={error}\r\n        />\r\n      </div>\r\n      <div className=\"form-control\">\r\n        {isEdit && (\r\n          <CustomButton styleClass=\"full-width text-4\" onClick={callback}>\r\n            <FontAwesomeIcon icon={faBan} /> Cancel\r\n          </CustomButton>\r\n        )}\r\n        <CustomButton\r\n          color=\"filled\"\r\n          styleClass=\"full-width text-4\"\r\n          type=\"submit\"\r\n        >\r\n          <FontAwesomeIcon icon={isEdit ? faEdit : faPencilAlt} />{\" \"}\r\n          {isEdit ? \"Edit\" : \"Post!\"}\r\n        </CustomButton>\r\n      </div>\r\n    </form>\r\n  );\r\n};\r\n\r\nconst CREATE_POST = gql`\r\n  mutation($body: String!) {\r\n    createPost(body: $body) {\r\n      id\r\n      body\r\n      username\r\n      firstName\r\n      lastName\r\n      edited\r\n      createdAt\r\n      likeCount\r\n      likes {\r\n        id\r\n        username\r\n      }\r\n      commentCount\r\n      comments {\r\n        id\r\n        commentId\r\n        body\r\n        username\r\n        firstName\r\n        lastName\r\n        createdAt\r\n        edited\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nconst EDIT_POST = gql`\r\n  mutation($postId: ID!, $body: String!) {\r\n    editPost(postId: $postId, body: $body) {\r\n      id\r\n      body\r\n      username\r\n      firstName\r\n      lastName\r\n      edited\r\n      createdAt\r\n      likeCount\r\n      likes {\r\n        id\r\n        username\r\n      }\r\n      commentCount\r\n      comments {\r\n        id\r\n        commentId\r\n        body\r\n        username\r\n        firstName\r\n        lastName\r\n        createdAt\r\n        edited\r\n      }\r\n    }\r\n  }\r\n`;\r\nexport default PostForm;\r\n","/mnt/d/projects/Main Projects/social-media/app/client/src/utils/graphql.ts",[],"/mnt/d/projects/Main Projects/social-media/app/client/src/components/PostCard.tsx",["159"],"/mnt/d/projects/Main Projects/social-media/app/client/src/components/LikeButton.tsx",["160"],"/mnt/d/projects/Main Projects/social-media/app/client/src/pages/SingleUser.tsx",[],"/mnt/d/projects/Main Projects/social-media/app/client/src/pages/SinglePost.tsx",[],"/mnt/d/projects/Main Projects/social-media/app/client/src/components/Forms/CommentForm.tsx",["161","162","163"],"import React, { useState, useEffect } from \"react\";\r\nimport { gql, useMutation } from \"@apollo/client\";\r\n\r\nimport useForm from \"../../hooks/useForm\";\r\nimport CustomInputText from \"../CustomInputText\";\r\nimport CustomButton from \"../CustomButton\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport {\r\n  faBan,\r\n  faComment,\r\n  faCommentDots,\r\n} from \"@fortawesome/free-solid-svg-icons\";\r\n\r\ninterface Props {\r\n  postId: string;\r\n  isEdit?: boolean;\r\n  body?: string;\r\n  commentId?: string;\r\n  callback?: () => void;\r\n}\r\n\r\nconst CommentForm: React.FC<Props> = ({\r\n  postId,\r\n  body,\r\n  callback,\r\n  commentId,\r\n  isEdit,\r\n}) => {\r\n  const [error, setError] = useState(\"\");\r\n  const { values, onSubmit, onChange } = useForm<{ comment: string }>(\r\n    {\r\n      comment: body ?? \"\",\r\n    },\r\n    handleFormSubmit\r\n  );\r\n  const commentLengthLimit = 200;\r\n\r\n  useEffect(() => {\r\n    if (values.comment.length > commentLengthLimit) {\r\n      if (\r\n        error !== `Post needs to be less than ${commentLengthLimit} in length`\r\n      ) {\r\n        setError(`Post needs to be less than ${commentLengthLimit} in length`);\r\n      }\r\n    } else {\r\n      if (error !== \"\") {\r\n        setError(\"\");\r\n      }\r\n    }\r\n  }, [values.comment]);\r\n\r\n  const [createComment, { loading: createLoading }] = useMutation(\r\n    CREATE_COMMENT,\r\n    {\r\n      update(_, { data: { createComment: post } }) {\r\n        values.comment = \"\";\r\n      },\r\n      variables: {\r\n        body: values.comment,\r\n        postId,\r\n      },\r\n    }\r\n  );\r\n\r\n  const [editComment, { loading: editLoading }] = useMutation(EDIT_COMMENT, {\r\n    update(_, { data: { editComment: post } }) {},\r\n    variables: {\r\n      postId,\r\n      commentId,\r\n      body: values.comment,\r\n    },\r\n  });\r\n\r\n  function handleFormSubmit() {\r\n    if (isEdit) {\r\n      editComment();\r\n      if (callback) {\r\n        callback();\r\n      }\r\n    } else {\r\n      createComment();\r\n    }\r\n  }\r\n\r\n  return (\r\n    <form\r\n      className=\"form comment-form full-width margin-y-md no-margin-x no-padding-t\"\r\n      onSubmit={onSubmit}\r\n    >\r\n      <h3 className=\"heading-primary text-5\">\r\n        {isEdit ? \"Edit your comment\" : \"Comment on this post\"}\r\n      </h3>\r\n\r\n      <div className=\"form-control\">\r\n        <CustomInputText\r\n          id=\"comment\"\r\n          label={`Comment... (${values.comment.length}/${commentLengthLimit})`}\r\n          name=\"comment\"\r\n          type=\"textarea\"\r\n          value={values.comment}\r\n          handleChange={onChange}\r\n          error={error}\r\n          required\r\n        />\r\n      </div>\r\n      <div className=\"form-control margin-t-md\">\r\n        {isEdit && (\r\n          <CustomButton styleClass=\"full-width\" onClick={callback}>\r\n            <FontAwesomeIcon icon={faBan} /> Cancel\r\n          </CustomButton>\r\n        )}\r\n        <CustomButton color=\"filled\" styleClass=\"full-width\" type=\"submit\">\r\n          <FontAwesomeIcon icon={isEdit ? faCommentDots : faComment} />{\" \"}\r\n          {isEdit ? \"Edit Comment\" : \"Comment\"}\r\n        </CustomButton>\r\n      </div>\r\n    </form>\r\n  );\r\n};\r\n\r\nconst CREATE_COMMENT = gql`\r\n  mutation createComment($postId: ID!, $body: String!) {\r\n    createComment(postId: $postId, body: $body) {\r\n      id\r\n      body\r\n      username\r\n      firstName\r\n      lastName\r\n      edited\r\n      createdAt\r\n      likeCount\r\n      likes {\r\n        id\r\n        username\r\n      }\r\n      commentCount\r\n      comments {\r\n        id\r\n        commentId\r\n        body\r\n        username\r\n        firstName\r\n        lastName\r\n        createdAt\r\n        edited\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nconst EDIT_COMMENT = gql`\r\n  mutation($postId: ID!, $commentId: ID!, $body: String!) {\r\n    editComment(postId: $postId, commentId: $commentId, body: $body) {\r\n      comments {\r\n        id\r\n        commentId\r\n        body\r\n        username\r\n        firstName\r\n        lastName\r\n        createdAt\r\n        edited\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nexport default CommentForm;\r\n","/mnt/d/projects/Main Projects/social-media/app/client/src/components/Comment.tsx",["164"],"import React, { useState, useContext } from \"react\";\r\nimport { gql, useMutation } from \"@apollo/client\";\r\nimport { faPenSquare, faTrash } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nimport { AuthContext } from \"../AuthUser.context\";\r\nimport { GET_ALL_POSTS } from \"../utils/graphql\";\r\nimport { getDate } from \"../utils/date\";\r\nimport Modal from \"./Modal\";\r\nimport CommentForm from \"./Forms/CommentForm\";\r\nimport CardMenu from \"./CardMenu\";\r\nimport useModal from \"../hooks/useModal\";\r\n\r\ninterface Props {\r\n  comment: {\r\n    id: string;\r\n    commentId: string;\r\n    body: string;\r\n    username: string;\r\n    firstName: string;\r\n    lastName: string;\r\n    createdAt: string;\r\n    edited: boolean;\r\n  };\r\n  postId: string;\r\n}\r\n\r\nconst Comment: React.FC<Props> = ({\r\n  comment: {\r\n    commentId,\r\n    body,\r\n    username,\r\n    firstName,\r\n    lastName,\r\n    createdAt,\r\n    edited,\r\n  },\r\n  postId,\r\n}) => {\r\n  const [showEditComment, setShowEditComment] = useState(false);\r\n  const { modalOpen, toggleModal } = useModal();\r\n  const { user } = useContext(AuthContext);\r\n\r\n  const [deleteComment, { loading }] = useMutation(DELETE_COMMENT, {\r\n    update(proxy, { data: { deleteComment: post } }) {\r\n      let queryData: any = proxy.readQuery({ query: GET_ALL_POSTS });\r\n\r\n      proxy.writeQuery({\r\n        query: GET_ALL_POSTS,\r\n        data: queryData,\r\n      });\r\n    },\r\n    onError(err) {\r\n      console.log(err);\r\n    },\r\n    variables: {\r\n      postId,\r\n      commentId,\r\n    },\r\n  });\r\n\r\n  let signedInUserComment = false;\r\n  if (user) {\r\n    signedInUserComment = user.username === username;\r\n  }\r\n\r\n  return (\r\n    <div className=\" card__background\">\r\n      <Modal\r\n        open={modalOpen}\r\n        onClose={toggleModal}\r\n        onCancel={toggleModal}\r\n        onConfirm={deleteComment}\r\n      >\r\n        Do you want to delete this comment?\r\n      </Modal>\r\n      <div className=\" card\">\r\n        {user && signedInUserComment && (\r\n          <CardMenu\r\n            menuItems={[\r\n              {\r\n                callback: () => setShowEditComment((show) => !show),\r\n                value: (\r\n                  <span>\r\n                    <FontAwesomeIcon icon={faPenSquare} /> Edit\r\n                  </span>\r\n                ),\r\n              },\r\n              {\r\n                callback: toggleModal,\r\n                value: (\r\n                  <span>\r\n                    <FontAwesomeIcon icon={faTrash} /> Delete\r\n                  </span>\r\n                ),\r\n              },\r\n            ]}\r\n          />\r\n        )}\r\n        <Link to={`/user/${username}`}>\r\n          <h2 className=\"card__title\">\r\n            {firstName} {lastName}\r\n            <span className=\"card__username link\"> @{username}</span>\r\n          </h2>\r\n        </Link>\r\n        <span className=\"card__meta\">{getDate(createdAt)}</span>\r\n        {showEditComment ? (\r\n          <CommentForm\r\n            isEdit\r\n            body={body}\r\n            postId={postId}\r\n            commentId={commentId}\r\n            callback={() => setShowEditComment((show) => !show)}\r\n          />\r\n        ) : (\r\n          <p className=\"card__description paragraph\">\r\n            {body}\r\n            {edited && <em>(edited)</em>}\r\n          </p>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst DELETE_COMMENT = gql`\r\n  mutation deleteComment($postId: ID!, $commentId: ID!) {\r\n    deleteComment(postId: $postId, commentId: $commentId) {\r\n      id\r\n    }\r\n  }\r\n`;\r\n\r\nexport default Comment;\r\n","/mnt/d/projects/Main Projects/social-media/app/client/src/Routes.tsx",[],"/mnt/d/projects/Main Projects/social-media/app/client/src/components/Logo.tsx",[],"/mnt/d/projects/Main Projects/social-media/app/client/src/components/Links.tsx",[],"/mnt/d/projects/Main Projects/social-media/app/client/src/components/CustomButton.tsx",[],"/mnt/d/projects/Main Projects/social-media/app/client/src/components/CustomInputText.tsx",[],"/mnt/d/projects/Main Projects/social-media/app/client/src/pages/NewPost.tsx",[],"/mnt/d/projects/Main Projects/social-media/app/client/src/components/Layout.tsx",[],"/mnt/d/projects/Main Projects/social-media/app/client/src/components/CardMenu.tsx",[],"/mnt/d/projects/Main Projects/social-media/app/client/src/utils/date.ts",[],"/mnt/d/projects/Main Projects/social-media/app/client/src/components/Toast.tsx",[],"/mnt/d/projects/Main Projects/social-media/app/client/src/hooks/useToast.tsx",[],"/mnt/d/projects/Main Projects/social-media/app/client/src/hooks/useForm.tsx",[],"/mnt/d/projects/Main Projects/social-media/app/client/src/hooks/useModal.tsx",[],"/mnt/d/projects/Main Projects/social-media/app/client/src/hooks/useOutsideAlerter.tsx",["165"],"/mnt/d/projects/Main Projects/social-media/app/client/src/components/CommentButton.tsx",[],"/mnt/d/projects/Main Projects/social-media/app/client/src/components/Modal.tsx",[],{"ruleId":"166","replacedBy":"167"},{"ruleId":"168","replacedBy":"169"},{"ruleId":"170","severity":1,"message":"171","line":43,"column":26,"nodeType":"172","messageId":"173","endLine":43,"endColumn":33},{"ruleId":"170","severity":1,"message":"171","line":30,"column":23,"nodeType":"172","messageId":"173","endLine":30,"endColumn":30},{"ruleId":"174","severity":1,"message":"175","line":42,"column":6,"nodeType":"176","endLine":42,"endColumn":19,"suggestions":"177"},{"ruleId":"170","severity":1,"message":"171","line":44,"column":24,"nodeType":"172","messageId":"173","endLine":44,"endColumn":31},{"ruleId":"170","severity":1,"message":"178","line":60,"column":29,"nodeType":"172","messageId":"173","endLine":60,"endColumn":38},{"ruleId":"170","severity":1,"message":"171","line":48,"column":24,"nodeType":"172","messageId":"173","endLine":48,"endColumn":31},{"ruleId":"174","severity":1,"message":"179","line":20,"column":3,"nodeType":"172","endLine":20,"endColumn":12,"suggestions":"180"},{"ruleId":"174","severity":1,"message":"175","line":50,"column":6,"nodeType":"176","endLine":50,"endColumn":22,"suggestions":"181"},{"ruleId":"170","severity":1,"message":"182","line":52,"column":36,"nodeType":"172","messageId":"173","endLine":52,"endColumn":49},{"ruleId":"170","severity":1,"message":"183","line":65,"column":34,"nodeType":"172","messageId":"173","endLine":65,"endColumn":45},{"ruleId":"170","severity":1,"message":"171","line":45,"column":27,"nodeType":"172","messageId":"173","endLine":45,"endColumn":34},{"ruleId":"174","severity":1,"message":"184","line":18,"column":6,"nodeType":"176","endLine":18,"endColumn":11,"suggestions":"185"},"no-native-reassign",["186"],"no-negated-in-lhs",["187"],"@typescript-eslint/no-unused-vars","'loading' is assigned a value but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'error'. Either include it or remove the dependency array.","ArrayExpression",["188"],"'editError' is assigned a value but never used.","React Hook useEffect contains a call to 'setisLiked'. Without a list of dependencies, this can lead to an infinite chain of updates. To fix this, pass [user, likes] as a second argument to the useEffect Hook.",["189"],["190"],"'createLoading' is assigned a value but never used.","'editLoading' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'callback'. Either include it or remove the dependency array. If 'callback' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["191"],"no-global-assign","no-unsafe-negation",{"desc":"192","fix":"193"},{"desc":"194","fix":"195"},{"desc":"196","fix":"197"},{"desc":"198","fix":"199"},"Update the dependencies array to be: [error, values.body]",{"range":"200","text":"201"},"Add dependencies array: [user, likes]",{"range":"202","text":"203"},"Update the dependencies array to be: [error, values.comment]",{"range":"204","text":"205"},"Update the dependencies array to be: [callback, ref]",{"range":"206","text":"207"},[1289,1302],"[error, values.body]",[793,793],", [user, likes]",[1229,1245],"[error, values.comment]",[487,492],"[callback, ref]"]