[{"/mnt/d/projects/Main Projects/social-media/app/client/src/index.tsx":"1","/mnt/d/projects/Main Projects/social-media/app/client/src/App.tsx":"2","/mnt/d/projects/Main Projects/social-media/app/client/src/utils/ApolloClient.ts":"3","/mnt/d/projects/Main Projects/social-media/app/client/src/components/Routes.tsx":"4","/mnt/d/projects/Main Projects/social-media/app/client/src/components/Navbar.tsx":"5","/mnt/d/projects/Main Projects/social-media/app/client/src/utils/cookies.ts":"6","/mnt/d/projects/Main Projects/social-media/app/client/src/components/Links.tsx":"7","/mnt/d/projects/Main Projects/social-media/app/client/src/pages/Home.tsx":"8","/mnt/d/projects/Main Projects/social-media/app/client/src/pages/Register.tsx":"9","/mnt/d/projects/Main Projects/social-media/app/client/src/pages/Login.tsx":"10","/mnt/d/projects/Main Projects/social-media/app/client/src/components/Forms/RegisterForm.tsx":"11","/mnt/d/projects/Main Projects/social-media/app/client/src/components/Forms/LoginForm.tsx":"12","/mnt/d/projects/Main Projects/social-media/app/client/src/hooks/useForm.ts":"13","/mnt/d/projects/Main Projects/social-media/app/client/src/components/CustomInput.tsx":"14","/mnt/d/projects/Main Projects/social-media/app/client/src/components/PostCard.tsx":"15","/mnt/d/projects/Main Projects/social-media/app/client/src/components/AuthRoute.tsx":"16","/mnt/d/projects/Main Projects/social-media/app/client/src/AuthUser.context.tsx":"17","/mnt/d/projects/Main Projects/social-media/app/client/src/graphql/posts.ts":"18","/mnt/d/projects/Main Projects/social-media/app/client/src/components/Forms/PostForm.tsx":"19"},{"size":219,"mtime":1609481171999,"results":"20","hashOfConfig":"21"},{"size":551,"mtime":1609492542974,"results":"22","hashOfConfig":"21"},{"size":601,"mtime":1609490268300,"results":"23","hashOfConfig":"21"},{"size":505,"mtime":1609489266450,"results":"24","hashOfConfig":"21"},{"size":384,"mtime":1609492535622,"results":"25","hashOfConfig":"21"},{"size":723,"mtime":1609481172096,"results":"26","hashOfConfig":"21"},{"size":661,"mtime":1609489870960,"results":"27","hashOfConfig":"21"},{"size":815,"mtime":1609580591754,"results":"28","hashOfConfig":"21"},{"size":214,"mtime":1609481172034,"results":"29","hashOfConfig":"21"},{"size":198,"mtime":1609481172023,"results":"30","hashOfConfig":"21"},{"size":3904,"mtime":1609492618160,"results":"31","hashOfConfig":"21"},{"size":2137,"mtime":1609492619643,"results":"32","hashOfConfig":"21"},{"size":547,"mtime":1609511071102,"results":"33","hashOfConfig":"21"},{"size":1026,"mtime":1609486307109,"results":"34","hashOfConfig":"21"},{"size":2676,"mtime":1609582805044,"results":"35","hashOfConfig":"21"},{"size":501,"mtime":1609492536683,"results":"36","hashOfConfig":"21"},{"size":1623,"mtime":1609581014216,"results":"37","hashOfConfig":"21"},{"size":1398,"mtime":1609582305136,"results":"38","hashOfConfig":"21"},{"size":1797,"mtime":1609492801998,"results":"39","hashOfConfig":"21"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},"5ctubq",{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"63","usedDeprecatedRules":"42"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"66","usedDeprecatedRules":"42"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"73"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"82","usedDeprecatedRules":"42"},"/mnt/d/projects/Main Projects/social-media/app/client/src/index.tsx",[],["83","84"],"/mnt/d/projects/Main Projects/social-media/app/client/src/App.tsx",[],"/mnt/d/projects/Main Projects/social-media/app/client/src/utils/ApolloClient.ts",[],"/mnt/d/projects/Main Projects/social-media/app/client/src/components/Routes.tsx",[],"/mnt/d/projects/Main Projects/social-media/app/client/src/components/Navbar.tsx",[],"/mnt/d/projects/Main Projects/social-media/app/client/src/utils/cookies.ts",[],"/mnt/d/projects/Main Projects/social-media/app/client/src/components/Links.tsx",[],"/mnt/d/projects/Main Projects/social-media/app/client/src/pages/Home.tsx",[],"/mnt/d/projects/Main Projects/social-media/app/client/src/pages/Register.tsx",[],"/mnt/d/projects/Main Projects/social-media/app/client/src/pages/Login.tsx",[],"/mnt/d/projects/Main Projects/social-media/app/client/src/components/Forms/RegisterForm.tsx",["85"],"import React from \"react\";\nimport { gql, useMutation } from \"@apollo/client\";\n\nimport { AuthContext } from \"../../AuthUser.context\";\nimport useForm from \"../../hooks/useForm\";\nimport CustomInput from \"../CustomInput\";\n\ninterface RegisterFormValues {\n  firstName: string;\n  lastName: string;\n  username: string;\n  email: string;\n  password: string;\n  confirmPassword: string;\n}\n\nconst RegisterForm: React.FC = () => {\n  const context = React.useContext(AuthContext);\n  const [errors, setErrors] = React.useState<RegisterFormValues>({\n    firstName: \"\",\n    lastName: \"\",\n    username: \"\",\n    email: \"\",\n    password: \"\",\n    confirmPassword: \"\",\n  });\n  const { values, onSubmit, onChange } = useForm<RegisterFormValues>(\n    {\n      firstName: \"\",\n      lastName: \"\",\n      username: \"\",\n      email: \"\",\n      password: \"\",\n      confirmPassword: \"\",\n    },\n    handleRegistration\n  );\n\n  const [registerUser, { loading }] = useMutation(REGISTER_USER, {\n    update(_, { data: { register: userData } }) {\n      context.login(userData);\n    },\n    variables: values,\n    onError({ graphQLErrors, networkError }) {\n      if (graphQLErrors) {\n        setErrors(graphQLErrors[0].extensions!.exception.errors);\n      }\n    },\n  });\n\n  function handleRegistration() {\n    registerUser();\n  }\n\n  return (\n    <form className=\"form\" onSubmit={onSubmit}>\n      <div className=\"form-control\">\n        <CustomInput\n          id=\"register-firstName\"\n          label=\"First Name\"\n          name=\"firstName\"\n          type=\"text\"\n          value={values.firstName}\n          handleChange={onChange}\n          error={errors.firstName}\n          required\n        />\n        <CustomInput\n          id=\"register-lastName\"\n          label=\"Last Name\"\n          name=\"lastName\"\n          type=\"text\"\n          value={values.lastName}\n          handleChange={onChange}\n          error={errors.lastName}\n        />\n      </div>\n      <div className=\"form-control\">\n        <CustomInput\n          handleChange={onChange}\n          id=\"register-username\"\n          label=\"Username\"\n          type=\"text\"\n          name=\"username\"\n          value={values.username}\n          error={errors.username}\n          required\n        />\n      </div>\n      <div className=\"form-control\">\n        <CustomInput\n          handleChange={onChange}\n          id=\"register-email\"\n          label=\"Email\"\n          type=\"email\"\n          name=\"email\"\n          value={values.email}\n          error={errors.email}\n          required\n        />\n      </div>\n      <div className=\"form-control\">\n        <CustomInput\n          handleChange={onChange}\n          id=\"register-password\"\n          label=\"Password\"\n          type=\"password\"\n          name=\"password\"\n          value={values.password}\n          error={errors.password}\n          required\n        />\n      </div>\n      <div className=\"form-control\">\n        <CustomInput\n          id=\"register-confirmPassword\"\n          label=\"Confirm password\"\n          name=\"confirmPassword\"\n          type=\"password\"\n          value={values.confirmPassword}\n          handleChange={onChange}\n          error={errors.confirmPassword}\n          required\n        />\n      </div>\n      <div className=\"form-control\">\n        <button type=\"submit\" className=\"btn btn__basic\">\n          Register\n        </button>\n      </div>\n    </form>\n  );\n};\n\nconst REGISTER_USER = gql`\n  mutation(\n    $username: String!\n    $firstName: String!\n    $lastName: String!\n    $email: String!\n    $password: String!\n    $confirmPassword: String!\n  ) {\n    register(\n      registerInput: {\n        username: $username\n        firstName: $firstName\n        lastName: $lastName\n        email: $email\n        password: $password\n        confirmPassword: $confirmPassword\n      }\n    ) {\n      username\n      token\n      createdAt\n      firstName\n      lastName\n      email\n      id\n    }\n  }\n`;\n\nexport default RegisterForm;\n","/mnt/d/projects/Main Projects/social-media/app/client/src/components/Forms/LoginForm.tsx",["86"],"import React from \"react\";\nimport { gql, useMutation } from \"@apollo/client\";\n\nimport { AuthContext } from \"../../AuthUser.context\";\nimport useForm from \"../../hooks/useForm\";\nimport CustomInput from \"../CustomInput\";\n\ninterface LoginFormValues {\n  username: string;\n  password: string;\n}\n\nconst LoginForm: React.FC = () => {\n  const context = React.useContext(AuthContext);\n  const [errors, setErrors] = React.useState<{ general: string }>({\n    general: \"\",\n  });\n  const { values, onSubmit, onChange } = useForm<LoginFormValues>(\n    {\n      username: \"\",\n      password: \"\",\n    },\n    handleLogin\n  );\n\n  const [loginUser, { loading }] = useMutation(LOGIN_USER, {\n    update(_, { data: { login: userData } }) {\n      context.login(userData);\n    },\n    onError({ graphQLErrors, networkError }) {\n      if (graphQLErrors) {\n        setErrors(graphQLErrors[0].extensions!.exception.errors);\n      }\n    },\n    variables: values,\n  });\n\n  function handleLogin() {\n    loginUser();\n  }\n\n  return (\n    <form className=\"form\" onSubmit={onSubmit}>\n      {errors.general !== \"\" && (\n        <h4 className=\"custom-input__error\">{errors.general}</h4>\n      )}\n      <div className=\"form-control\">\n        <CustomInput\n          id=\"login-username\"\n          label=\"Username\"\n          type=\"text\"\n          name=\"username\"\n          value={values.username}\n          handleChange={onChange}\n          required\n        />\n      </div>\n      <div className=\"form-control\">\n        <CustomInput\n          id=\"login-password\"\n          label=\"Password\"\n          type=\"password\"\n          name=\"password\"\n          value={values.password}\n          handleChange={onChange}\n          required\n        />\n      </div>\n      <div className=\"form-control\">\n        <button type=\"submit\" className=\"btn btn__basic\">\n          Login\n        </button>\n      </div>\n    </form>\n  );\n};\n\nconst LOGIN_USER = gql`\n  mutation($username: String!, $password: String!) {\n    login(username: $username, password: $password) {\n      id\n      username\n      firstName\n      lastName\n      token\n      email\n      createdAt\n    }\n  }\n`;\n\nexport default LoginForm;\n","/mnt/d/projects/Main Projects/social-media/app/client/src/hooks/useForm.ts",[],"/mnt/d/projects/Main Projects/social-media/app/client/src/components/CustomInput.tsx",[],"/mnt/d/projects/Main Projects/social-media/app/client/src/components/PostCard.tsx",["87","88"],"import { gql, useMutation } from \"@apollo/client\";\r\nimport React from \"react\";\r\nimport { GET_ALL_POSTS } from \"../graphql/posts\";\r\n\r\nimport { Post, User } from \"../utils/types\";\r\n\r\ninterface Props {\r\n  post: Post;\r\n  user: User | null;\r\n}\r\n\r\nconst PostCard: React.FC<Props> = ({\r\n  post: {\r\n    id,\r\n    edited,\r\n    firstName,\r\n    lastName,\r\n    username,\r\n    createdAt,\r\n    body,\r\n    likeCount,\r\n    commentCount,\r\n    comments,\r\n    likes,\r\n  },\r\n  user,\r\n}) => {\r\n  const [deletePost, { loading }] = useMutation(DELETE_POST, {\r\n    update(proxy, { data: { deletePost: post } }) {\r\n      let data: any = proxy.readQuery({ query: GET_ALL_POSTS });\r\n\r\n      proxy.writeQuery({\r\n        query: GET_ALL_POSTS,\r\n        data: {\r\n          getPosts: data.getPosts.filter(\r\n            (post: { id: string }) => id !== post.id\r\n          ),\r\n        },\r\n      });\r\n    },\r\n    onError(err) {\r\n      console.log(err);\r\n    },\r\n    variables: { postId: id },\r\n  });\r\n\r\n  let signedInUserPost = false;\r\n  if (user) {\r\n    signedInUserPost = user.username === username;\r\n  }\r\n\r\n  return (\r\n    <div className=\"post-card\">\r\n      {signedInUserPost && (\r\n        <div className=\"post-card__menu\">\r\n          <ul className=\"post-card__menu-items\">\r\n            <li className=\"post-card__menu-item\">Edit</li>\r\n            <li className=\"post-card__menu-item\" onClick={() => deletePost()}>\r\n              Delete\r\n            </li>\r\n          </ul>\r\n        </div>\r\n      )}\r\n      <h2 className=\"title\">\r\n        {firstName} {lastName}\r\n      </h2>\r\n      <h4 className=\"subtitle\">\r\n        <a href=\"\" className=\"link\">\r\n          @{username}\r\n        </a>\r\n      </h4>\r\n      <span className=\"post-card__meta\">\r\n        {new Date(createdAt).toLocaleDateString(\"en-gb\", {\r\n          year: \"numeric\",\r\n          month: \"long\",\r\n          day: \"numeric\",\r\n        })}\r\n      </span>\r\n      <p className=\"post-card__description\">\r\n        {edited && <em>(edited)</em>}\r\n        {body}\r\n      </p>\r\n      <div className=\"post-card__extra\">\r\n        <button className=\"btn\">{likeCount}</button>\r\n        <button className=\"btn\">{commentCount}</button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst DELETE_POST = gql`\r\n  mutation deletePost($postId: ID!) {\r\n    deletePost(postId: $postId) {\r\n      id\r\n      body\r\n      username\r\n      firstName\r\n      lastName\r\n      edited\r\n      createdAt\r\n      likeCount\r\n      likes {\r\n        id\r\n        username\r\n      }\r\n      commentCount\r\n      comments {\r\n        id\r\n        commentId\r\n        body\r\n        username\r\n        firstName\r\n        lastName\r\n        createdAt\r\n        edited\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nexport default PostCard;\r\n","/mnt/d/projects/Main Projects/social-media/app/client/src/components/AuthRoute.tsx",[],"/mnt/d/projects/Main Projects/social-media/app/client/src/AuthUser.context.tsx",[],"/mnt/d/projects/Main Projects/social-media/app/client/src/graphql/posts.ts",[],"/mnt/d/projects/Main Projects/social-media/app/client/src/components/Forms/PostForm.tsx",["89"],"import { gql, useMutation } from \"@apollo/client\";\r\nimport React from \"react\";\r\n\r\nimport useForm from \"../../hooks/useForm\";\r\nimport { GET_ALL_POSTS } from \"../../graphql/posts\";\r\nimport CustomInput from \"../CustomInput\";\r\n\r\ninterface NewPostFormValues {\r\n  body: string;\r\n}\r\n\r\nconst PostForm: React.FC = () => {\r\n  let { values, onChange, onSubmit } = useForm<NewPostFormValues>(\r\n    { body: \"\" },\r\n    handleNewPostCreation\r\n  );\r\n\r\n  const [createPost, { loading }] = useMutation(CREATE_POST, {\r\n    update(proxy, { data: { createPost: post } }) {\r\n      let data: any = proxy.readQuery({ query: GET_ALL_POSTS });\r\n\r\n      proxy.writeQuery({\r\n        query: GET_ALL_POSTS,\r\n        data: { getPosts: [post, ...data.getPosts] },\r\n      });\r\n      values.body = \"\";\r\n    },\r\n    onError(err) {\r\n      console.log(err);\r\n    },\r\n    variables: values,\r\n  });\r\n\r\n  function handleNewPostCreation() {\r\n    createPost();\r\n  }\r\n\r\n  return (\r\n    <form className=\"form post-form\" onSubmit={onSubmit}>\r\n      <CustomInput\r\n        id=\"new-post\"\r\n        label=\"Create a new post\"\r\n        name=\"body\"\r\n        type=\"text\"\r\n        value={values.body}\r\n        handleChange={onChange}\r\n        required\r\n      />\r\n      <button type=\"submit\" className=\"btn\">\r\n        Post!\r\n      </button>\r\n    </form>\r\n  );\r\n};\r\n\r\nconst CREATE_POST = gql`\r\n  mutation($body: String!) {\r\n    createPost(body: $body) {\r\n      id\r\n      body\r\n      username\r\n      firstName\r\n      lastName\r\n      edited\r\n      createdAt\r\n      likeCount\r\n      likes {\r\n        id\r\n        username\r\n      }\r\n      commentCount\r\n      comments {\r\n        id\r\n        commentId\r\n        body\r\n        username\r\n        firstName\r\n        lastName\r\n        createdAt\r\n        edited\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nexport default PostForm;\r\n",{"ruleId":"90","replacedBy":"91"},{"ruleId":"92","replacedBy":"93"},{"ruleId":"94","severity":1,"message":"95","line":39,"column":26,"nodeType":"96","messageId":"97","endLine":39,"endColumn":33},{"ruleId":"94","severity":1,"message":"95","line":26,"column":23,"nodeType":"96","messageId":"97","endLine":26,"endColumn":30},{"ruleId":"94","severity":1,"message":"95","line":28,"column":24,"nodeType":"96","messageId":"97","endLine":28,"endColumn":31},{"ruleId":"98","severity":1,"message":"99","line":68,"column":9,"nodeType":"100","endLine":68,"endColumn":37},{"ruleId":"94","severity":1,"message":"95","line":18,"column":24,"nodeType":"96","messageId":"97","endLine":18,"endColumn":31},"no-native-reassign",["101"],"no-negated-in-lhs",["102"],"@typescript-eslint/no-unused-vars","'loading' is assigned a value but never used.","Identifier","unusedVar","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","no-global-assign","no-unsafe-negation"]