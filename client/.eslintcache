[{"/mnt/d/projects/Main Projects/social-media/app/client/src/index.tsx":"1","/mnt/d/projects/Main Projects/social-media/app/client/src/App.tsx":"2","/mnt/d/projects/Main Projects/social-media/app/client/src/utils/ApolloClient.ts":"3","/mnt/d/projects/Main Projects/social-media/app/client/src/components/Navbar.tsx":"4","/mnt/d/projects/Main Projects/social-media/app/client/src/utils/cookies.ts":"5","/mnt/d/projects/Main Projects/social-media/app/client/src/components/Links.tsx":"6","/mnt/d/projects/Main Projects/social-media/app/client/src/pages/Home.tsx":"7","/mnt/d/projects/Main Projects/social-media/app/client/src/pages/Register.tsx":"8","/mnt/d/projects/Main Projects/social-media/app/client/src/pages/Login.tsx":"9","/mnt/d/projects/Main Projects/social-media/app/client/src/components/Forms/RegisterForm.tsx":"10","/mnt/d/projects/Main Projects/social-media/app/client/src/components/Forms/LoginForm.tsx":"11","/mnt/d/projects/Main Projects/social-media/app/client/src/hooks/useForm.ts":"12","/mnt/d/projects/Main Projects/social-media/app/client/src/components/CustomInput.tsx":"13","/mnt/d/projects/Main Projects/social-media/app/client/src/components/AuthRoute.tsx":"14","/mnt/d/projects/Main Projects/social-media/app/client/src/AuthUser.context.tsx":"15","/mnt/d/projects/Main Projects/social-media/app/client/src/components/Forms/PostForm.tsx":"16","/mnt/d/projects/Main Projects/social-media/app/client/src/utils/graphql.ts":"17","/mnt/d/projects/Main Projects/social-media/app/client/src/components/PostCard.tsx":"18","/mnt/d/projects/Main Projects/social-media/app/client/src/components/LikeButton.tsx":"19","/mnt/d/projects/Main Projects/social-media/app/client/src/pages/SingleUser.tsx":"20","/mnt/d/projects/Main Projects/social-media/app/client/src/pages/SinglePost.tsx":"21","/mnt/d/projects/Main Projects/social-media/app/client/src/pages/Routes.tsx":"22","/mnt/d/projects/Main Projects/social-media/app/client/src/components/Forms/CommentForm.tsx":"23","/mnt/d/projects/Main Projects/social-media/app/client/src/components/Comment.tsx":"24","/mnt/d/projects/Main Projects/social-media/app/client/src/components/CommentButton.tsx":"25","/mnt/d/projects/Main Projects/social-media/app/client/src/components/Forms/EditForm.tsx":"26","/mnt/d/projects/Main Projects/social-media/app/client/src/components/ConfirmModal.tsx":"27"},{"size":219,"mtime":1609481171999,"results":"28","hashOfConfig":"29"},{"size":546,"mtime":1609585135079,"results":"30","hashOfConfig":"29"},{"size":601,"mtime":1609490268300,"results":"31","hashOfConfig":"29"},{"size":394,"mtime":1609692710678,"results":"32","hashOfConfig":"29"},{"size":723,"mtime":1609481172096,"results":"33","hashOfConfig":"29"},{"size":577,"mtime":1609586615894,"results":"34","hashOfConfig":"29"},{"size":803,"mtime":1609661887345,"results":"35","hashOfConfig":"29"},{"size":214,"mtime":1609481172034,"results":"36","hashOfConfig":"29"},{"size":198,"mtime":1609481172023,"results":"37","hashOfConfig":"29"},{"size":3904,"mtime":1609492618160,"results":"38","hashOfConfig":"29"},{"size":2137,"mtime":1609492619643,"results":"39","hashOfConfig":"29"},{"size":547,"mtime":1609511071102,"results":"40","hashOfConfig":"29"},{"size":1026,"mtime":1609486307109,"results":"41","hashOfConfig":"29"},{"size":501,"mtime":1609492536683,"results":"42","hashOfConfig":"29"},{"size":1623,"mtime":1609581014216,"results":"43","hashOfConfig":"29"},{"size":1797,"mtime":1609583240312,"results":"44","hashOfConfig":"29"},{"size":468,"mtime":1609583256065,"results":"45","hashOfConfig":"29"},{"size":4454,"mtime":1609752930554,"results":"46","hashOfConfig":"29"},{"size":1521,"mtime":1609661472955,"results":"47","hashOfConfig":"29"},{"size":160,"mtime":1609584983157,"results":"48","hashOfConfig":"29"},{"size":1074,"mtime":1609586219688,"results":"49","hashOfConfig":"29"},{"size":718,"mtime":1609661601127,"results":"50","hashOfConfig":"29"},{"size":1763,"mtime":1609662348472,"results":"51","hashOfConfig":"29"},{"size":1028,"mtime":1609661719029,"results":"52","hashOfConfig":"29"},{"size":637,"mtime":1609667276202,"results":"53","hashOfConfig":"29"},{"size":1706,"mtime":1609671349437,"results":"54","hashOfConfig":"29"},{"size":1174,"mtime":1609752904970,"results":"55","hashOfConfig":"29"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},"5ctubq",{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"77","usedDeprecatedRules":"58"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"80","usedDeprecatedRules":"58"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"91","usedDeprecatedRules":"58"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"100","usedDeprecatedRules":"58"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"107","usedDeprecatedRules":"58"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"114","usedDeprecatedRules":"58"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},"/mnt/d/projects/Main Projects/social-media/app/client/src/index.tsx",[],["117","118"],"/mnt/d/projects/Main Projects/social-media/app/client/src/App.tsx",[],"/mnt/d/projects/Main Projects/social-media/app/client/src/utils/ApolloClient.ts",[],"/mnt/d/projects/Main Projects/social-media/app/client/src/components/Navbar.tsx",[],"/mnt/d/projects/Main Projects/social-media/app/client/src/utils/cookies.ts",[],"/mnt/d/projects/Main Projects/social-media/app/client/src/components/Links.tsx",[],"/mnt/d/projects/Main Projects/social-media/app/client/src/pages/Home.tsx",[],"/mnt/d/projects/Main Projects/social-media/app/client/src/pages/Register.tsx",[],"/mnt/d/projects/Main Projects/social-media/app/client/src/pages/Login.tsx",[],"/mnt/d/projects/Main Projects/social-media/app/client/src/components/Forms/RegisterForm.tsx",["119"],"import React from \"react\";\nimport { gql, useMutation } from \"@apollo/client\";\n\nimport { AuthContext } from \"../../AuthUser.context\";\nimport useForm from \"../../hooks/useForm\";\nimport CustomInput from \"../CustomInput\";\n\ninterface RegisterFormValues {\n  firstName: string;\n  lastName: string;\n  username: string;\n  email: string;\n  password: string;\n  confirmPassword: string;\n}\n\nconst RegisterForm: React.FC = () => {\n  const context = React.useContext(AuthContext);\n  const [errors, setErrors] = React.useState<RegisterFormValues>({\n    firstName: \"\",\n    lastName: \"\",\n    username: \"\",\n    email: \"\",\n    password: \"\",\n    confirmPassword: \"\",\n  });\n  const { values, onSubmit, onChange } = useForm<RegisterFormValues>(\n    {\n      firstName: \"\",\n      lastName: \"\",\n      username: \"\",\n      email: \"\",\n      password: \"\",\n      confirmPassword: \"\",\n    },\n    handleRegistration\n  );\n\n  const [registerUser, { loading }] = useMutation(REGISTER_USER, {\n    update(_, { data: { register: userData } }) {\n      context.login(userData);\n    },\n    variables: values,\n    onError({ graphQLErrors, networkError }) {\n      if (graphQLErrors) {\n        setErrors(graphQLErrors[0].extensions!.exception.errors);\n      }\n    },\n  });\n\n  function handleRegistration() {\n    registerUser();\n  }\n\n  return (\n    <form className=\"form\" onSubmit={onSubmit}>\n      <div className=\"form-control\">\n        <CustomInput\n          id=\"register-firstName\"\n          label=\"First Name\"\n          name=\"firstName\"\n          type=\"text\"\n          value={values.firstName}\n          handleChange={onChange}\n          error={errors.firstName}\n          required\n        />\n        <CustomInput\n          id=\"register-lastName\"\n          label=\"Last Name\"\n          name=\"lastName\"\n          type=\"text\"\n          value={values.lastName}\n          handleChange={onChange}\n          error={errors.lastName}\n        />\n      </div>\n      <div className=\"form-control\">\n        <CustomInput\n          handleChange={onChange}\n          id=\"register-username\"\n          label=\"Username\"\n          type=\"text\"\n          name=\"username\"\n          value={values.username}\n          error={errors.username}\n          required\n        />\n      </div>\n      <div className=\"form-control\">\n        <CustomInput\n          handleChange={onChange}\n          id=\"register-email\"\n          label=\"Email\"\n          type=\"email\"\n          name=\"email\"\n          value={values.email}\n          error={errors.email}\n          required\n        />\n      </div>\n      <div className=\"form-control\">\n        <CustomInput\n          handleChange={onChange}\n          id=\"register-password\"\n          label=\"Password\"\n          type=\"password\"\n          name=\"password\"\n          value={values.password}\n          error={errors.password}\n          required\n        />\n      </div>\n      <div className=\"form-control\">\n        <CustomInput\n          id=\"register-confirmPassword\"\n          label=\"Confirm password\"\n          name=\"confirmPassword\"\n          type=\"password\"\n          value={values.confirmPassword}\n          handleChange={onChange}\n          error={errors.confirmPassword}\n          required\n        />\n      </div>\n      <div className=\"form-control\">\n        <button type=\"submit\" className=\"btn btn__basic\">\n          Register\n        </button>\n      </div>\n    </form>\n  );\n};\n\nconst REGISTER_USER = gql`\n  mutation(\n    $username: String!\n    $firstName: String!\n    $lastName: String!\n    $email: String!\n    $password: String!\n    $confirmPassword: String!\n  ) {\n    register(\n      registerInput: {\n        username: $username\n        firstName: $firstName\n        lastName: $lastName\n        email: $email\n        password: $password\n        confirmPassword: $confirmPassword\n      }\n    ) {\n      username\n      token\n      createdAt\n      firstName\n      lastName\n      email\n      id\n    }\n  }\n`;\n\nexport default RegisterForm;\n","/mnt/d/projects/Main Projects/social-media/app/client/src/components/Forms/LoginForm.tsx",["120"],"import React from \"react\";\nimport { gql, useMutation } from \"@apollo/client\";\n\nimport { AuthContext } from \"../../AuthUser.context\";\nimport useForm from \"../../hooks/useForm\";\nimport CustomInput from \"../CustomInput\";\n\ninterface LoginFormValues {\n  username: string;\n  password: string;\n}\n\nconst LoginForm: React.FC = () => {\n  const context = React.useContext(AuthContext);\n  const [errors, setErrors] = React.useState<{ general: string }>({\n    general: \"\",\n  });\n  const { values, onSubmit, onChange } = useForm<LoginFormValues>(\n    {\n      username: \"\",\n      password: \"\",\n    },\n    handleLogin\n  );\n\n  const [loginUser, { loading }] = useMutation(LOGIN_USER, {\n    update(_, { data: { login: userData } }) {\n      context.login(userData);\n    },\n    onError({ graphQLErrors, networkError }) {\n      if (graphQLErrors) {\n        setErrors(graphQLErrors[0].extensions!.exception.errors);\n      }\n    },\n    variables: values,\n  });\n\n  function handleLogin() {\n    loginUser();\n  }\n\n  return (\n    <form className=\"form\" onSubmit={onSubmit}>\n      {errors.general !== \"\" && (\n        <h4 className=\"custom-input__error\">{errors.general}</h4>\n      )}\n      <div className=\"form-control\">\n        <CustomInput\n          id=\"login-username\"\n          label=\"Username\"\n          type=\"text\"\n          name=\"username\"\n          value={values.username}\n          handleChange={onChange}\n          required\n        />\n      </div>\n      <div className=\"form-control\">\n        <CustomInput\n          id=\"login-password\"\n          label=\"Password\"\n          type=\"password\"\n          name=\"password\"\n          value={values.password}\n          handleChange={onChange}\n          required\n        />\n      </div>\n      <div className=\"form-control\">\n        <button type=\"submit\" className=\"btn btn__basic\">\n          Login\n        </button>\n      </div>\n    </form>\n  );\n};\n\nconst LOGIN_USER = gql`\n  mutation($username: String!, $password: String!) {\n    login(username: $username, password: $password) {\n      id\n      username\n      firstName\n      lastName\n      token\n      email\n      createdAt\n    }\n  }\n`;\n\nexport default LoginForm;\n","/mnt/d/projects/Main Projects/social-media/app/client/src/hooks/useForm.ts",[],"/mnt/d/projects/Main Projects/social-media/app/client/src/components/CustomInput.tsx",[],"/mnt/d/projects/Main Projects/social-media/app/client/src/components/AuthRoute.tsx",[],"/mnt/d/projects/Main Projects/social-media/app/client/src/AuthUser.context.tsx",[],"/mnt/d/projects/Main Projects/social-media/app/client/src/components/Forms/PostForm.tsx",["121"],"import { gql, useMutation } from \"@apollo/client\";\r\nimport React from \"react\";\r\n\r\nimport useForm from \"../../hooks/useForm\";\r\nimport { GET_ALL_POSTS } from \"../../utils/graphql\";\r\nimport CustomInput from \"../CustomInput\";\r\n\r\ninterface NewPostFormValues {\r\n  body: string;\r\n}\r\n\r\nconst PostForm: React.FC = () => {\r\n  let { values, onChange, onSubmit } = useForm<NewPostFormValues>(\r\n    { body: \"\" },\r\n    handleNewPostCreation\r\n  );\r\n\r\n  const [createPost, { loading }] = useMutation(CREATE_POST, {\r\n    update(proxy, { data: { createPost: post } }) {\r\n      let data: any = proxy.readQuery({ query: GET_ALL_POSTS });\r\n\r\n      proxy.writeQuery({\r\n        query: GET_ALL_POSTS,\r\n        data: { getPosts: [post, ...data.getPosts] },\r\n      });\r\n      values.body = \"\";\r\n    },\r\n    onError(err) {\r\n      console.log(err);\r\n    },\r\n    variables: values,\r\n  });\r\n\r\n  function handleNewPostCreation() {\r\n    createPost();\r\n  }\r\n\r\n  return (\r\n    <form className=\"form post-form\" onSubmit={onSubmit}>\r\n      <CustomInput\r\n        id=\"new-post\"\r\n        label=\"Create a new post\"\r\n        name=\"body\"\r\n        type=\"text\"\r\n        value={values.body}\r\n        handleChange={onChange}\r\n        required\r\n      />\r\n      <button type=\"submit\" className=\"btn\">\r\n        Post!\r\n      </button>\r\n    </form>\r\n  );\r\n};\r\n\r\nconst CREATE_POST = gql`\r\n  mutation($body: String!) {\r\n    createPost(body: $body) {\r\n      id\r\n      body\r\n      username\r\n      firstName\r\n      lastName\r\n      edited\r\n      createdAt\r\n      likeCount\r\n      likes {\r\n        id\r\n        username\r\n      }\r\n      commentCount\r\n      comments {\r\n        id\r\n        commentId\r\n        body\r\n        username\r\n        firstName\r\n        lastName\r\n        createdAt\r\n        edited\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nexport default PostForm;\r\n","/mnt/d/projects/Main Projects/social-media/app/client/src/utils/graphql.ts",[],"/mnt/d/projects/Main Projects/social-media/app/client/src/components/PostCard.tsx",["122","123"],"/mnt/d/projects/Main Projects/social-media/app/client/src/components/LikeButton.tsx",[],"/mnt/d/projects/Main Projects/social-media/app/client/src/pages/SingleUser.tsx",["124"],"import React from \"react\";\r\n\r\ninterface Props {}\r\n\r\nconst SingleUser: React.FC<Props> = ({}) => {\r\n  return <div>user</div>;\r\n};\r\n\r\nexport default SingleUser;\r\n","/mnt/d/projects/Main Projects/social-media/app/client/src/pages/SinglePost.tsx",[],"/mnt/d/projects/Main Projects/social-media/app/client/src/pages/Routes.tsx",[],"/mnt/d/projects/Main Projects/social-media/app/client/src/components/Forms/CommentForm.tsx",["125"],"import React from \"react\";\r\nimport { gql, useMutation } from \"@apollo/client\";\r\n\r\nimport useForm from \"../../hooks/useForm\";\r\nimport CustomInput from \"../CustomInput\";\r\n\r\ninterface Props {\r\n  postId: string;\r\n}\r\n\r\nconst CommentForm: React.FC<Props> = ({ postId }) => {\r\n  const { values, onSubmit, onChange } = useForm<{ comment: string }>(\r\n    {\r\n      comment: \"\",\r\n    },\r\n    handleComment\r\n  );\r\n\r\n  const [createComment, { loading }] = useMutation(CREATE_COMMENT, {\r\n    update(_, { data: { createComment: post } }) {\r\n      values.comment = \"\";\r\n    },\r\n    variables: {\r\n      body: values.comment,\r\n      postId,\r\n    },\r\n  });\r\n\r\n  function handleComment() {\r\n    createComment();\r\n  }\r\n\r\n  return (\r\n    <form className=\"form form-comment\" onSubmit={onSubmit}>\r\n      <div className=\"form-control\">\r\n        <CustomInput\r\n          id=\"comment\"\r\n          label=\"Comment\"\r\n          name=\"comment\"\r\n          type=\"text\"\r\n          value={values.comment}\r\n          handleChange={onChange}\r\n          required\r\n        />\r\n      </div>\r\n      <div className=\"form-control\">\r\n        <button type=\"submit\" className=\"btn btn__basic\">\r\n          Comment\r\n        </button>\r\n      </div>\r\n    </form>\r\n  );\r\n};\r\n\r\nconst CREATE_COMMENT = gql`\r\n  mutation createComment($postId: ID!, $body: String!) {\r\n    createComment(postId: $postId, body: $body) {\r\n      id\r\n      body\r\n      username\r\n      firstName\r\n      lastName\r\n      edited\r\n      createdAt\r\n      likeCount\r\n      likes {\r\n        id\r\n        username\r\n      }\r\n      commentCount\r\n      comments {\r\n        id\r\n        commentId\r\n        body\r\n        username\r\n        firstName\r\n        lastName\r\n        createdAt\r\n        edited\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nexport default CommentForm;\r\n","/mnt/d/projects/Main Projects/social-media/app/client/src/components/Comment.tsx",[],"/mnt/d/projects/Main Projects/social-media/app/client/src/components/CommentButton.tsx",[],"/mnt/d/projects/Main Projects/social-media/app/client/src/components/Forms/EditForm.tsx",["126","127"],"import { gql, useMutation } from \"@apollo/client\";\r\nimport React from \"react\";\r\n\r\nimport useForm from \"../../hooks/useForm\";\r\nimport { GET_ALL_POSTS } from \"../../utils/graphql\";\r\nimport CustomInput from \"../CustomInput\";\r\n\r\ninterface Props {\r\n  body: string;\r\n  postId: string;\r\n  callback?: () => void;\r\n}\r\n\r\ninterface EditFormValues {\r\n  body: string;\r\n}\r\n\r\nconst EditForm: React.FC<Props> = ({ body, postId, callback }) => {\r\n  let { values, onChange, onSubmit } = useForm<EditFormValues>(\r\n    { body },\r\n    handleEdit\r\n  );\r\n\r\n  const [editPost, { loading }] = useMutation(EDIT_POST, {\r\n    update(_, { data: { editPost: post } }) {},\r\n    variables: {\r\n      postId,\r\n      body: values.body,\r\n    },\r\n  });\r\n\r\n  function handleEdit() {\r\n    editPost();\r\n    if (callback) {\r\n      callback();\r\n    }\r\n  }\r\n\r\n  return (\r\n    <form className=\"form post-form\" onSubmit={onSubmit}>\r\n      <CustomInput\r\n        id=\"edit-post\"\r\n        label=\"Edit post\"\r\n        name=\"body\"\r\n        type=\"text\"\r\n        value={values.body}\r\n        handleChange={onChange}\r\n        required\r\n      />\r\n      <button type=\"submit\" className=\"btn\">\r\n        Edit\r\n      </button>\r\n    </form>\r\n  );\r\n};\r\n\r\nconst EDIT_POST = gql`\r\n  mutation($postId: ID!, $body: String!) {\r\n    editPost(postId: $postId, body: $body) {\r\n      id\r\n      body\r\n      username\r\n      firstName\r\n      lastName\r\n      edited\r\n      createdAt\r\n      likeCount\r\n      likes {\r\n        id\r\n        username\r\n      }\r\n      commentCount\r\n      comments {\r\n        id\r\n        commentId\r\n        body\r\n        username\r\n        firstName\r\n        lastName\r\n        createdAt\r\n        edited\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nexport default EditForm;\r\n","/mnt/d/projects/Main Projects/social-media/app/client/src/components/ConfirmModal.tsx",[],{"ruleId":"128","replacedBy":"129"},{"ruleId":"130","replacedBy":"131"},{"ruleId":"132","severity":1,"message":"133","line":39,"column":26,"nodeType":"134","messageId":"135","endLine":39,"endColumn":33},{"ruleId":"132","severity":1,"message":"133","line":26,"column":23,"nodeType":"134","messageId":"135","endLine":26,"endColumn":30},{"ruleId":"132","severity":1,"message":"133","line":18,"column":24,"nodeType":"134","messageId":"135","endLine":18,"endColumn":31},{"ruleId":"132","severity":1,"message":"133","line":39,"column":24,"nodeType":"134","messageId":"135","endLine":39,"endColumn":31},{"ruleId":"132","severity":1,"message":"136","line":58,"column":9,"nodeType":"134","messageId":"135","endLine":58,"endColumn":21},{"ruleId":"137","severity":1,"message":"138","line":5,"column":38,"nodeType":"139","messageId":"140","endLine":5,"endColumn":40},{"ruleId":"132","severity":1,"message":"133","line":19,"column":27,"nodeType":"134","messageId":"135","endLine":19,"endColumn":34},{"ruleId":"132","severity":1,"message":"141","line":5,"column":10,"nodeType":"134","messageId":"135","endLine":5,"endColumn":23},{"ruleId":"132","severity":1,"message":"133","line":24,"column":22,"nodeType":"134","messageId":"135","endLine":24,"endColumn":29},"no-native-reassign",["142"],"no-negated-in-lhs",["143"],"@typescript-eslint/no-unused-vars","'loading' is assigned a value but never used.","Identifier","unusedVar","'confirmModal' is assigned a value but never used.","no-empty-pattern","Unexpected empty object pattern.","ObjectPattern","unexpected","'GET_ALL_POSTS' is defined but never used.","no-global-assign","no-unsafe-negation"]